#!/usr/bin/env bash
# Generated by: needle
#    Date Time: 01/11/18 04:59:42 PM
#  Description: Check status to validate cases for smoke
# 
# Conventions
#   1. Two(2) space indentation. No tabs
#   2. Variables and function starts with snake_case
#		3. Constants are declared with ALL_CAPS

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_FILE="$PARTITION_PATH/nd/raw_data/NodeJS_Cav-30-48_cav-nsecom-01.txt"
SUMMARY_TOP_FILE="$TEST_RUN_PATH/summary.top"            

# Entry point to check status
# Add cases to handle your validation
function main() {
	case $(get_test_name) in
    "NETJS-004-001") handle_netjs_004_001_case ;;
    "NETJS-004-002") handle_netjs_004_002_case ;;
    "NETJS-004-003") handle_netjs_004_003_case ;;
# End case def
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
  esac
}

# category id
function log_status_int() {
	local _status="$1"
	local why="$2"
	# Setting product id and category id as 1000 in case $productid or $categoryid may be empty
	# Set the productid, categoryid in smoke/etc/smoke.properties to
	# override this behaviour
	local productid=${productid:-1000}
	local categoryid=${categoryid:-1000}
	log_status_and_exit ${productid} ${categoryid} ${_status} "${why}"
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}

function handle_netjs_004_001_case() {
  custom_record=$(grep "^19,"  ${RAW_DATA_FILE})
  event2=$(grep "^2," ${RAW_DATA_FILE} |tail -1|cut -d ',' -f 2)
  custom_flowpathid=$(grep "^19," ${RAW_DATA_FILE} |tail -1|cut -d ',' -f 2)
  custom_methodargu=$(grep "^19," ${RAW_DATA_FILE} |tail -1|cut -d ',' -f 3|cut -d ':' -f 1)
  custom_methodid=$(grep "^19," ${RAW_DATA_FILE} |tail -1|cut -d ',' -f 3|cut -d ':' -f 2)
  custom_sequenceid=$(grep "^19," ${RAW_DATA_FILE} |tail -1|cut -d ',' -f 3|cut -d ':' -f 3)
  seqsearch="${custom_methodid}_0:${custom_sequenceid}"
  event4=$(grep "^4," ${RAW_DATA_FILE} |tail -1|cut -d ',' -f 7|grep ${seqsearch})

  if [ -z ${custom_record} ]; then 
     log_status_int "FAIL" "Event ID 19 not detected for corelateEventCallback"
  fi
  #*if [ ${event2} -ne ${custom_flowpathid} ]; then  
   #  log_status_int "FAIL" "Might be 19 record not detected for flowpath id ${event2} or URL does not contain asynchronous functions "
  #fi */
  if [ ${custom_methodargu} != 1 ]; then  
     log_status_int "FAIL" " Sequence Id not captured of Event."
  fi
  if [ -z ${seqsearch}]; then
     log_status_int "FAIL" "SequenceID of event not detected with Sequence blob ${seqsearch} "
  fi  
   log_status_int "PASS" "19 record is detecting with corelateEventCallback=1;"
}
function handle_netjs_004_002_case() {
  custom_record=$(grep "^19,"  ${RAW_DATA_FILE})
  event2=$(grep "^2," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 2)
  custom_flowpathid=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 2)
  custom_methodargu=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 3|cut -d ':' -f 1)
  custom_methodid=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 3|cut -d ':' -f 2)
  custom_sequenceid=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 3|cut -d ':' -f 3)
  seqsearch="${custom_methodid}_0:${custom_sequenceid}"
  event4=$(grep "^4," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 7|grep ${seqsearch})

  if [ -z ${custom_record}]; then
     log_status_int "FAIL" "Event ID 19 not detected for corelateEventCallback"
  fi
  if [ ${event2} -ne ${custom_flowpathid} ]; then
     log_status_int "FAIL" "corelateEventCallback not detected for flowpath id ${event2}"
  fi
  if [ ${custom_methodargu} != 1 ]; then
     log_status_int "FAIL" " Sequence Id not captured of Event."
  fi
  if [ -z ${seqsearch}]; then
     log_status_int "FAIL" "SequenceID of event not detected with Sequence blob ${seqsearch} "
  fi
   log_status_int "PASS" "19 record is detetcing with corelateEventCallback=1%1;"
}

function handle_netjs_004_003_case() {
  custom_record=$(grep "^19,"  ${RAW_DATA_FILE})
  event2=$(grep "^2," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 2)
  custom_flowpathid=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 2)
  custom_methodargu=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 3|cut -d ':' -f 1)
  custom_methodid=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 3|cut -d ':' -f 2)
  custom_sequenceid=$(grep "^19," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 3|cut -d ':' -f 3)
  seqsearch="${custom_methodid}_0:${custom_sequenceid}"
  event4=$(grep "^4," ${RAW_DATA_FILE} |head -1|cut -d ',' -f 7|grep ${seqsearch})

  if [ -z ${custom_record} ]; then
     log_status_int "FAIL" "Event ID 19 not detected for corelateEventCallback"
  fi
  if [ ${event2} -ne ${custom_flowpathid} ]; then
     log_status_int "PASS" "19 record not detected for flowpath id ${event2} and URL does not contain asynchronous functions "
  fi
   log_status_int "FAIL" "19 record is detecting with corelateEventCallback=1 for those URL that does not contain asynchronous functions"
}

main
