#!/usr/bin/env bash

###################################################################################################
#                                                                                                 #
#   Feature :- Business Transaction                                                               #
#   Developer :- Sonali Mishra/Rajesh Kumar                                                       #
#   Modified Date :- 22th Jan 2021                                                                # 
#                                                                                                 #
###################################################################################################

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"                                                
PARTITION_PATH="$TEST_RUN_PATH/$(get_test_partition)"                                          
RAW_DATA_HOME="$PARTITION_PATH/nd/raw_data/"                           
gdf_file="$(ls $NS_WDIR/logs/TR$(get_test_idx)/tsdb/tsdb_metrics.txt)"  
prc_file="$NS_WDIR/logs/TR$(get_test_idx)/$(get_test_partition)/reports/csv/prc.csv"           
#summary_file="$(ls $NS_WDIR/logs/TR$(get_test_idx)/summary_gdf.data )"                         
AVAILABLE_TIERS=$Project

function main() {
	case $(get_test_name) in
    "GOLANG-010-001") handle_golang_010_001_case ;;
		*) handle_unknown_case ;;
		?) handle_unknown_case ;;
    esac
}

function log_status_int() {
    agentID="$1"
    status="$2"
    why="${3}"
    log_status_and_exit $agentID $productid $categoryid $status "${why}" 
}


function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}

function get_bt_count() {                                                                      
    if [ $tier == "Golang" ];then
        bt_count=$(egrep -c "Tier:Golang>Server:Cav-38>Instance:Instance01>Business Transactions:Home" $gdf_file) 
    elif [ $tier == "Golang" ];then
        bt_count=$(egrep -c "Golang>Cav-30-5>cav-nsecom-10>Home" $gdf_file)
    elif [ $tier == "Golang" ];then
        bt_count=$(egrep -c "Tier:Golang>Server:10.10.70.40>Instance:nsecomm>Business Transactions:Home" $gdf_file)
    elif [ $tier == "Golang" ];then
        bt_count=$(egrep -c "Tier:Golang>Server:10.10.70.40>Instance:nsecomm>Business Transactions:Home" $gdf_file)
    elif [ $tier == "Golang" ];then
        bt_count=$(egrep -c "Tier:Golang>Server:10.10.70.40>Instance:nsecomm>Business Transactions:Home" $gdf_file)
    fi
    echo $bt_count                                                                             
}

function handle_golang_010_001_case() {
    for tier in $AVAILABLE_TIERS; do
        if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
            DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
        Complete_URI $DATA_FILE
        RC=$?
            if [ $RC -eq 0 ];then
                log_status_int "${tier}" "PASS" "Same number of BTs and transactions found for complete URI match"
            fi  
        else
            log_status_int "${tier}" "FAIL" "Raw data has not formed for Tier=${tier}"
        fi
    done
}


Complete_URI(){
    RAW_DATA_FILE=$1
    RC=$?   
    start_line=$(grep -n "Business" $gdf_file | cut -d : -f1)                                  
    start_line=$((start_line + 2))                                                             
    end_line=$(grep -n "Normal Average Response Time" $gdf_file | cut -d : -f1)                
    end_line=$((end_line - 5))                                                                 
    num_btx_in_gdf=$(sed -n "${start_line},${end_line}p" $gdf_file | grep -v Overall |grep -v "${tier}" | wc -l)
    num_tx_in_prc=$(cut -d , -f2  $prc_file | sort -n |  uniq | wc -l)                                                             
    debug "start_line=$start_line, end_line=$end_line, num_btx_in_gdf=$num_btx_in_gdf, num_tx_in_prc=$num_tx_in_prc"
                                                                      
    local eventId2=$(grep -c "^2," $RAW_DATA_FILE)
    local eventId4=$(grep -c "^4," $RAW_DATA_FILE)
    if [ ! -e $RAW_DATA_FILE ];then
        log_status_int "${tier}" "FAIL" "Rawdata file does not exist: ${RAW_DATA_FILE}"
        return 1
    else
        log_status_int "${tier}" "PASS" "Rawdata file Exists: ${RAW_DATA_FILE}"
    fi
    if [ ! -s $RAW_DATA_FILE ];then
        log_status_int "${tier}" "FAIL" "Rawdata file having zero size: ${RAW_DATA_FILE}"
        return 1
    else
        log_status_int "${tier}" "PASS" "Rawdata file size is not zero: ${RAW_DATA_FILE}"
    fi
    if [ $eventId2 -lt 1 ] && [ $eventId4 -lt 1 ];then
        log_status_int "${tier}" "FAIL" "No Flowpath detected in RawData File"
        return 1
    else
        log_status_int "${tier}" "PASS" "Flowpath detected in RawData File"
    fi
    if [ $eventId2 -ne $eventId4 ];then
        log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not equal. Number of flowpaths: ${eventId4}"
        return 1
    else
        log_status_int "${tier}" "PASS" "Event ID 2 and 4 are equal. Number of flowpaths: ${eventId4}"
    fi

    if [ $num_btx_in_gdf -le $(( num_tx_in_prc + 1 )) ];then
        log_status_int  "${tier}" "PASS" "Same number of BTs and transactions found for complete URI match(expected=$num_tx_in_prc; actual=$num_btx_in_gdf)"
    else                                                                                       
        log_status_int  "${tier}" "FAIL" "Numbers varied  between BTs and transactions for complete URI match(expected=$num_tx_in_prc; actual=$num_btx_in_gdf)"
        return 1
    fi          
    return 0
}

main
