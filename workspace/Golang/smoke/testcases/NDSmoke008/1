#!/usr/bin/env bash

###################################################################################################
#                                                                                                 #
#   Developer :- Abhishek Sharma                                                                  #
#   Feature :- Method Monitor       			                                          #
#   Modified Date :- 25th Nov 2022                                                                 # 
#                                                                                                 #
###################################################################################################

# Source out required files
source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/helpers.sh
source $NS_WDIR/lib/smoke.properties

RUBY_GET_LATEST_FILE_PROG="/usr/bin/get_latest_file.rb"
PARTITION_PATH="${NS_WDIR}/logs/TR$(get_test_idx)/$(get_test_partition)"
RAW_DATA_HOME="$PARTITION_PATH/nd/raw_data"
MONITOR_LOG_FILE="${PARTITION_PATH}/monitor.log"
NDC_TRACE_LOG_FILE="${PARTITION_PATH}/nd/logs/ndc_trace.log"
SUMMARY_GDF_FILE="${NS_WDIR}/logs/TR$(get_test_idx)/summary_gdf.data"
TSDB_FILE="${NS_WDIR}/logs/TR$(get_test_idx)/tsdb/tsdb_metrics.txt"
AGGR_DATA_FILE="$PARTITION_PATH/nd/raw_data"
AVAILABLE_TIERS=$Project

function main() {
	case $(get_test_name) in
		    "GOLANG-008-001") handle_golang_008_001_case ;;
		    "GOLANG-008-002") handle_golang_008_002_case ;;
	        	*) handle_unknown_case ;;
			?) handle_unknown_case ;;
        esac
}

function log_status_int() {
    agentID="$1"
    status="$2"
    why="${3}"
    log_status_and_exit $agentID $productid $categoryid $status "${why}"
}

function handle_unknown_case() {
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase name not found"
}

function raw_data_val(){
        RAW_DATA_FILE=$1
        eventId0=$(grep -c "^0," $RAW_DATA_FILE)
        eventId2=$(grep -c "^2," $RAW_DATA_FILE)
        eventId4=$(grep -c "^4," $RAW_DATA_FILE)
        eventId5=$(grep -c "^5," $RAW_DATA_FILE)
        eventId99=$(grep -c "^99," $RAW_DATA_FILE)
        eventId11=$(grep -c "^11," $RAW_DATA_FILE)
        eventId10=$(grep -c "^10," $RAW_DATA_FILE)
        filesize=$(ls -ltrh $RAW_DATA_FILE | cut -d ' ' -f5)
        if [ ! -e $RAW_DATA_FILE ];then
                log_status_int "${tier}" "FAIL" "Rawdata file does not exist: ${RAW_DATA_FILE}"
                return 1
        else
                log_status_int "${tier}" "PASS" "Rawdata file exists: ${RAW_DATA_FILE}"
        fi

        if [ ! -s $RAW_DATA_FILE ];then
                log_status_int "${tier}" "FAIL" "Rawdata file having zero size: ${filesize}"
                return 1
        else
                log_status_int "${tier}" "PASS" "Rawdata file is not zero size: ${filesize}"
        fi

        if [ $eventId0 -eq 1 ];then
                log_status_int "${tier}" "PASS" "Event id 0 detected: ${eventId0}"
        else
                log_status_int "${tier}" "Fail" "Event id 0 is not detected: ${eventId0}"
        fi

        if [ $eventId99 -eq 1 ];then
                log_status_int "${tier}" "PASS" "Event id 99  detected: ${eventId99}"
        else
                log_status_int "${tier}" "FAIL" "Event id 99 is not detected: ${eventId99}"
        fi

        if [ $eventId11 -eq 1 ];then
                log_status_int "${tier}" "PASS" "Event id 11 is detected: ${eventId11}"
        else
                log_status_int "${tier}" "FAIL" "Event id 11 is not detected: ${eventId11}"
        fi

        if [ $eventId5 -lt 1 ];then
                log_status_int "${tier}" "FAIL" "Event id 5 is not  detected: ${eventId5}"
        else
                log_status_int "${tier}" "PASS" "Event id 5 is  detected: ${eventId5}"
        fi

        debug "eventId2=$eventId2, eventId4=$eventId4"
        if [ $eventId2 -lt 1 ] || [ $eventId4 -lt 1 ];then
                 log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not detected with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"
        else
                 log_status_int "${tier}" "PASS" "Event ID 2 and 4 are detected with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"
        fi

        if [ $eventId2 -ne $eventId4 ];then
                log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not eqaul with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"

        else
                log_status_int "${tier}" "PASS" "Event ID 2 and 4 are equal with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"
        fi
        return 0
}

function handle_golang_008_001_case() {
    for tier in $AVAILABLE_TIERS; do
        if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
            DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
        MethodMonitor $DATA_FILE
        RC=$?
            if [ $countR -gt 0 ];then
                verify_rawdata $DATA_FILE
            fi
	    if [ $RC -eq 0 ];then
                log_status_int "${tier}" "PASS" "Passed  NDMethodMonAsList for GoAgent"
            fi
        else
            log_status_int "${tier}" "FAIL" "Raw data has not formed for Tier=${tier}"
        fi
    done
}
MethodMonitor(){
        RAW_DATA_FILE=$1
	AGGR_DATA_FILE=$1
        countR=0;
        local rc
        rc=-1
        serviceMethodCount=-1
        check_cm_init=$(grep "cm_init_monitor" ${NDC_TRACE_LOG_FILE}|grep -o "MON_GDF=/home/cavisson/work/sys/cm_nd_bt.gdf" | wc -l)
        check_Accepting_Msg=$(grep "cm_nd_method_mon_data_ex" ${NDC_TRACE_LOG_FILE} | grep -o "Accepting new connection"| head -1 | wc -l)
        graphCount=$(grep "^61," ${AGGR_DATA_FILE} | head -1 | wc -w)
        totalMethodInvoc=$(grep "ND Method Stats" $TSDB_FILE | grep "Tier:$tier"| grep -o "Total Method Invocations"|head -1)
        methodInvocationperSec=$(grep "ND Method Stats" $TSDB_FILE | grep "Tier:$tier"| grep -o "Method Invocations/Sec"|head -1)
        methodExecutionTime=$(grep "ND Method Stats" $TSDB_FILE | grep "Tier:$tier"| grep -o "Method Execution Time"|head -1)
        methodCPUTime=$(grep "ND Method Stats" $TSDB_FILE | grep "Tier:$tier"| grep -o "Method CPU Time(ms)"|head -1)
        tsdb_method=$(grep "$tier" $TSDB_FILE | grep "MGroup:ND Method Stats" |cut -d , -f4 |cut -d '>' -f2|head -1)

	
		if [ $tsdb_gc -eq 0 ]; then
			log_status_int "${tier}" "FAIL" "Failed for ND Method Stats Monitor. ND Method Stats Monitor is not available in tsdb_metrics.txt file."
			 ((countR++))
			 return 1
        	else
			log_status_int "${tier}" "PASS" "Passed for ND Method Stats Monitor . ND Method Stats Monitor is available in tsdb_metrics.txt file."
		fi

		if [ $check_cm_init -gt 0 ];then
           		log_status_int "${tier}" "PASS" "Passed for cm_init monitor request sent to NDC from NS for BT and found logs in ndc_trace.log file."
	       else
        	     	log_status_int "${tier}" "FAIL" "Failed for cm_init monitor request not sent to NDC from NS for BT and found logs in ndc_trace.log file."
		      ((countR++))
       		       return 1
	     	fi

	      if [ $check_Accepting_Msg -gt 0 ];then
        	  	 log_status_int "${tier}" "PASS" "Passed for Accepting new connection message sent from NS to NDC in ndc_trace.log file."
      		else
	         	  log_status_int "${tier}" "FAIL" "Failed for Accepting new connection message sent from NS to NDC in ndc_trace.log file."
       			 ((countR++))
       			 return 1
     		 fi

		if [ ! -z $totalMethodInvoc ];then
                	  log_status_int "${tier}" "PASS" "Passed as Total Method Invocations is coming in tsdb_metrics file."
	      else	
        	          log_status_int "${tier}" "FAIL" "Failed as Total Method Invocations is not coming in tsdb_metrics file."
                	  return 1
	       fi

	       if [ ! -z $methodInvocationperSec ];then
          	        log_status_int "${tier}" "PASS" "Passed as Method Invocations/Sec is coming in tsdb_metrics file."
	     else
        	          log_status_int "${tier}" "FAIL" "Failed as Method Invocations/Sec is not coming in tsdb_metrics file."
                	  return 1
	     fi

	     if [ ! -z $methodExecutionTime ];then
		     log_status_int "${tier}" "PASS" "Passed as Method Execution Time(ms) is coming in tsdb_metrics file."
	     else
		     log_status_int "${tier}" "FAIL" "Failed as Method Execution Time(ms) is not coming in tsdb_metrics file."
		     return 1
	     fi

	     if [ ! -z $methodCPUTime ];then
		     log_status_int "${tier}" "PASS" "Passed as Method CPU Time(ms) is coming in tsdb_metrics file."
	     else
		     log_status_int "${tier}" "FAIL" "Failed as Method CPU Time(ms) is not coming in tsdb_metrics file."
		     return 1
	     fi	
	    return 0                                                                                               
}

function handle_golang_008_002_case() {
    for tier in $AVAILABLE_TIERS; do
        if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
            DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
            AGGR_DATA_FILE=$RAW_DATA_HOME$(ls $RAW_DATA_HOME |grep "agg_data_$tier"|head -1)
        Aggr_data_file $DATA_FILE $AGGR_DATA_FILE
        RC=$?
            if [ $countR -gt 0 ];then
                verify_rawdata $DATA_FILE
            fi
	    if [ $RC -eq 0 ];then
                log_status_int "${tier}" "PASS" "Passed  NDMethodMonAsList 61 Record for agg_data"
            fi
        else
            log_status_int "${tier}" "FAIL" "Raw data has not formed for Tier=${tier}"
        fi
    done
}

Aggr_data_file(){
        AGGR_DATA_FILE=$1
	AGG_DATA_FILE=$2
	countR=0;
        eventID61=$(grep -c "^61," ${AGGR_DATA_FILE})

        if [ $eventID61 -gt 0 ];then
                log_status_int "${tier}" "PASS" "61 Records are observed in Aggregate File"
        else
                log_status_int "${tier}" "FAIL" "61 Records are not observed in Aggregate File"
        fi

        if [ -s $TSDB_FILE ];then
                log_status_int "${tier}" "PASS" "TestRun TSDB File Exist with non Zero File Size"
        fi

        if [ -s $AGGR_DATA_FILE ]; then
                RC=0
        else
                RC=1
        fi

    return 0
}

main
