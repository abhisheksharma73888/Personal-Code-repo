#!/usr/bin/env bash

###################################################################################################
#                                                                                                 #
#  Developer :- Abhishek Sharma                                                                   #
#  Feature :- BT Monitor  and IP Monitor                                                          #
#  Modified Date :- 11th Nov 2020                                                                 #
#                                                                                                 #
###################################################################################################

source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/smoke.properties

RUBY_GET_LATEST_FILE_PROG="/usr/bin/get_latest_file.rb"
PARTITION_PATH="${NS_WDIR}/logs/TR$(get_test_idx)/$(get_test_partition)"
RAW_DATA_HOME="$PARTITION_PATH/nd/raw_data"
MONITOR_LOG_FILE="${PARTITION_PATH}/monitor.log"
NDC_TRACE_LOG_FILE="${PARTITION_PATH}/nd/logs/ndc_trace.log"
SUMMARY_GDF_FILE="${NS_WDIR}/logs/TR$(get_test_idx)/summary_gdf.data"
TSDB_FILE="${NS_WDIR}/logs/TR$(get_test_idx)/tsdb/tsdb_metrics.txt"
AGGR_DATA_FILE="$PARTITION_PATH/nd/raw_data"
AVAILABLE_TIERS=$Project

function main(){
	case $(get_test_name) in
		"GOLANG-007-001") handle_golang_007_001_case ;;
		"GOLANG-007-002") handle_golang_007_003_case ;;
		"GOLANG-007-003") handle_golang_007_003_case ;;
		*) handle_unknown_case ;; 
		?) handle_unknown_case ;;
	esac
}


function log_status_int(){
	agentID="$1"
	status="$2"
	why="${3}"
	log_status_and_exit $agentID $productid $categoryid $status "${why}"
}


function handle_unknown_case(){
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase not found"
}


function raw_data_val(){
        RAW_DATA_FILE=$1
        eventId0=$(grep -c "^0," $RAW_DATA_FILE)
        eventId2=$(grep -c "^2," $RAW_DATA_FILE)
        eventId4=$(grep -c "^4," $RAW_DATA_FILE)
        eventId5=$(grep -c "^5," $RAW_DATA_FILE)
        eventId99=$(grep -c "^99," $RAW_DATA_FILE)
        eventId11=$(grep -c "^11," $RAW_DATA_FILE)
        eventId10=$(grep -c "^10," $RAW_DATA_FILE)
        filesize=$(ls -ltrh $RAW_DATA_FILE | cut -d ' ' -f5)
        if [ ! -e $RAW_DATA_FILE ];then
                log_status_int "${tier}" "FAIL" "Rawdata file does not exist: ${RAW_DATA_FILE}"
                return 1
        else
                log_status_int "${tier}" "PASS" "Rawdata file exists: ${RAW_DATA_FILE}"
        fi

        if [ ! -s $RAW_DATA_FILE ];then
                log_status_int "${tier}" "FAIL" "Rawdata file having zero size: ${filesize}"
                return 1
        else
                log_status_int "${tier}" "PASS" "Rawdata file is not zero size: ${filesize}"
        fi

        if [ $eventId0 -eq 1 ];then
                log_status_int "${tier}" "PASS" "Event id 0 detected: ${eventId0}"
        else
                log_status_int "${tier}" "Fail" "Event id 0 is not detected: ${eventId0}"
        fi

        if [ $eventId99 -eq 1 ];then
                log_status_int "${tier}" "PASS" "Event id 99  detected: ${eventId99}"
        else
                log_status_int "${tier}" "FAIL" "Event id 99 is not detected: ${eventId99}"
        fi

        if [ $eventId11 -eq 1 ];then
                log_status_int "${tier}" "PASS" "Event id 11 is detected: ${eventId11}"
        else
                log_status_int "${tier}" "FAIL" "Event id 11 is not detected: ${eventId11}"
        fi

        if [ $eventId5 -lt 1 ];then
                log_status_int "${tier}" "FAIL" "Event id 5 is not  detected: ${eventId5}"
        else
                log_status_int "${tier}" "PASS" "Event id 5 is  detected: ${eventId5}"
        fi

        debug "eventId2=$eventId2, eventId4=$eventId4"
        if [ $eventId2 -lt 1 ] || [ $eventId4 -lt 1 ];then
                 log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not detected with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"
        else
                 log_status_int "${tier}" "PASS" "Event ID 2 and 4 are detected with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"
        fi

        if [ $eventId2 -ne $eventId4 ];then
                log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not eqaul with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"

        else
                log_status_int "${tier}" "PASS" "Event ID 2 and 4 are equal with bciPct%=${bcipct}.No of flowpath of eventId2: ${eventId2} and No of fps of eventId4: ${eventId4}}"
        fi
        return 0
}

function handle_golang_007_001_case(){
	for tier in $AVAILABLE_TIERS; do
		if [ $(ls $RAW_DATA_HOME |grep "$tier"|head -1) ];then
			DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "$tier"|tail -1)
		bt_mon_verification $AGGR_FILE $DATA_FILE
		RC=$?
        if [ $countRR -gt 0 ];then
             raw_data_val $DATA_FILE
        fi

	fi
	if [ $RC -eq 0 ];then
		log_status_int "${tier}" "PASS" "Passed for validaiton of ND BT Monitor"
	else
		log_status_int "${tier}" "FAIL" "Failed for validaiton of ND BT Monitor"
	fi
	done

}
function bt_mon_verification(){
        AGGR_DATA_FILE=$1
	RAW_DATA_FILE=$2
	countR=0;
        rc=-1
        serviceMethodCount=-1
        check_cm_init=$(grep "cm_init_monitor" ${NDC_TRACE_LOG_FILE} |grep -o "MON_GDF=/home/cavisson/work/sys/cm_nd_bt.gdf" | wc -l)
        check_Accepting_Msg=$(grep "cm_nd_bt_mon_data" ${NDC_TRACE_LOG_FILE} | grep -o "Accepting new connection"| wc -l)
	reqPerSec=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Requests per sec"| wc -l)
        avgRespTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Average Response Time"| wc -l)
        avgReqSize=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Average Request Size"| wc -l)
        errorPerSec=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Errors/sec"| wc -l)	
        normalAvgRespTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Normal Average Response Time (ms)"| wc -l)
        slowAvgRespTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Slow Average Response Time (ms)"| wc -l)
        vSlowAvgRespTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Very Slow Average Response Time (ms)"| wc -l)
        errorAvgRespTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Error Average Response Time (ms)"| wc -l)
        percSlowVSlowTrans=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Percent Slow and Very Slow Transactions"|wc -l)
        avgCPUTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Average Cpu Time (ms)"| wc -l)
        avgWaitTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Average Wait Time (ms)"| wc -l)
        avgSyncTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Average Sync Time (ms)"| wc -l)
        avgQueueTime=$(grep "Business Transactions" ${TSDB_FILE} | grep "Tier:$tier"| grep -o "Average Queue Time (ms)"| wc -l)


                if [ $check_cm_init -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed for cm_init monitor request sent to NDC from NS for BT and found logs in ndc_trace.log file."
                else
                        log_status_int "${tier}" "FAIL" "Failed for cm_init monitor request not sent to NDC from NS for BT and found logs in ndc_trace.log file."
			((countR++))
			return 1
                fi
                if [ $check_Accepting_Msg -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed for Accepting new connection message sent from NS to NDC in ndc_trace.log file."
                else
                        log_status_int "${tier}" "FAIL" "Failed for Accepting new connection message sent from NS to NDC in ndc_trace.log file."
			((countR++))
                        return 1
                fi
		if [ $reqPerSec -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Requests per sec is coming in tsdb_metrics file."
		else
                        log_status_int "${tier}" "FAIL" "Failed as Requests per sec is not coming in tsdb_metrics file."
			((countR++))
                        return 1
		fi
		if [ $avgRespTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Average Response Time is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Average Response Time is not coming in tsdb_metrics file."
			((countR++))
                        return 1
		fi
		if [ $avgReqSize -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Average Request Size is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Average Request Size is not coming in tsdb_metrics file."
			((countR++))
                        return 1
		fi
		if [ $errorPerSec -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Errors/sec is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Errors/sec is not coming in tsdb_metrics file."
			((countR++))
                        return 1
		fi

                if [ $normalAvgRespTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Normal Average Response Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Normal Average Response Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi

                if [ $slowAvgRespTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Slow Average Response Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Slow Average Response Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi
                if [ $vSlowAvgRespTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Very Slow Average Response Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Very Slow Average Response Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi
                if [ $errorAvgRespTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Error Average Response Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Error Average Response Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi
                if [ $percSlowVSlowTrans -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Percent Slow and Very Slow Transactions is coming in tsdb_metrics file."
                else
                       log_status_int "${tier}" "FAIL" "Failed as Percent Slow and Very Slow Transactions is not coming in tsdb_metrics file."
		       ((countR++))
                        return 1
                fi
                if [ $avgCPUTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Average Cpu Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Average Cpu Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi
                if [ $avgWaitTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Average Wait Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Average Wait Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi
                if [ $avgSyncTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Average Sync Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Average Sync Time (ms) is not coming in tsdb_metrics file."
			((countR++))
                        return 1
                fi
                if [ $avgQueueTime -gt 0 ];then
                        log_status_int "${tier}" "PASS" "Passed as Average Queue Time (ms) is coming in tsdb_metrics file."
                else
                        log_status_int "${tier}" "FAIL" "Failed as Average Queue Time (ms) is not coming in tsdb_metrics file."
                        return 1
                fi

}

function handle_golang_007_002_case(){
        for tier in $AVAILABLE_TIERS; do
                if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
                        DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
                        AGG_DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "agg_data_$tier"|head -1)
                        RAW_FILE=$(ls $RAW_DATA_HOME |egrep "^$tier"|tail -1)
                        Server=$(echo "${RAW_FILE//$tier}"|cut -d  "_" -f2)
                        Instance=$(echo "${RAW_FILE//$tier}"|cut -d  "_" -f3|cut -d "." -f1)
                        BTMonitor_Enable_1 $DATA_FILE $AGG_DATA_FILE $Server $Instance
                        RC=$?
                        if [ $countR -gt 0 ];then
                                raw_data_val $DATA_FILE
                        fi
                        if [ $RC -eq 0 ];then
                            log_status_int "$tier" "PASS" "Passed for enableBTMonitor=0."
                        fi
                else
                        log_status_int "${tier}" "FAIL" "Failed for enableBTMonitor=0."
                fi
    done
}

BTMonitor_Enable_1(){
        countR=0;
        RAW_DATA_FILE=$1
        AGGR_DATA_FILE=$2

        tier=$(grep "^0," $RAW_DATA_FILE | head -1 | cut -d "," -f2)
        server=$(grep "^0," $RAW_DATA_FILE | head -1 | cut -d "," -f3)
        instance=$(grep "^0," $RAW_DATA_FILE | head -1 | cut -d "," -f4)

        local rec74=$(grep -c "^74," $AGGR_DATA_FILE)
        if [ -s $TSDB_FILE ];then
            log_status_int "$tier" "PASS" "TestRun GDF File Exist with non Zero File Size"
        else
            log_status_int "$tier" "FAIL" "TestRun GDF File doesnot Exist with non Zero File Size"
            ((countR++))
            return 1
        fi
        if  [ grep "Tier:${tier}>Server:${server}" $TSDB_FILE |];then
                log_status_int "$tier" "PASS" "Passed for BT Monitors Been Observed in Aggregate File"
        else
                log_status_int "$tier" "FAIL" "Failed for BT Monitors Been NOT Observed in Aggregate File"
                ((countR++))
                return 1
        fi
        if [ -z $rec74 ];then
                log_status_int "$tier" "FAIL" "Failed for BT Monitors NOT Observed in Aggregate File"
                ((countR++))
                return 1
        else
                log_status_int "$tier" "PASS" "Passed for BT Monitors Been Observed in Aggregate File"
        fi
        if [[ $(grep "Group:Business Transactions" $TSDB_FILE) ]];then
                log_status_int "$tier" "FAIL" "Failed for Business Transaction graphs found when BT Monitoring is disabled."
                ((countR++))
                return 1
        else
                log_status_int "$tier" "PASS" "Passed for Business Transaction graphs Not found when BT Monitoring is disabled."
        fi
        return 0
}

function handle_golang_007_003_case(){
        for tier in $AVAILABLE_TIERS; do
                if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
                        DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
                        AGG_DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "agg_data_$tier"|head -1)
                        RAW_FILE=$(ls $RAW_DATA_HOME |egrep "^$tier"|tail -1)
                        Server=$(echo "${RAW_FILE//$tier}"|cut -d  "_" -f2)
                        Instance=$(echo "${RAW_FILE//$tier}"|cut -d  "_" -f3|cut -d "." -f1)
                        IPMonitor_Enable_1 $DATA_FILE $AGG_DATA_FILE $Server $Instance
                        RC=$?
                        if [ $countR -gt 0 ];then
                                raw_data_val $DATA_FILE
                        fi
                        if [ $RC -eq 0 ];then
                            log_status_int "$tier" "PASS" "Passed for enableBTMonitor=1."
                        fi
                else
                        log_status_int "${tier}" "FAIL" "Raw data has not formed for Tier=${tier}"
                fi
        done
}

IPMonitor_Enable_1(){
        countR=0;
        RAW_DATA_FILE=$1
        AGGR_DATA_FILE=$2
        server=$3
        instance=$4
        local rec75=$(grep -c "^75," $AGGR_DATA_FILE)
        if [ -s $TSDB_FILE ];then
            log_status_int "$tier" "PASS" "TestRun GDF File Exist with non Zero File Size"
        else
            log_status_int "$tier" "FAIL" "TestRun GDF File NOT Exist with non Zero File Size"
            ((countR++))
            return 1
        fi

	tier=$(grep "^0," $RAW_DATA_FILE | head -1 | cut -d "," -f2)
	server=$(grep "^0," $RAW_DATA_FILE | head -1 | cut -d "," -f3)
	instance=$(grep "^0," $RAW_DATA_FILE | head -1 | cut -d "," -f4)
	
        BT_Vector=$(grep "AllTransactions" $TSDB_FILE | grep "Tier:$tier>Server:$server>Instance:$instance>Business Transactions:AllTransactions,MGType:Application" |cut -d "," -f3 | wc -l)
        if  [ $BT_Vector -gt 0 ];then
            log_status_int "$tier" "PASS" "BTMonitor are observed in Testrun Gdf File"
        else
            log_status_int "$tier" "FAIL" "BTMonitor are NOT observed in Testrun Gdf File"
            ((countR++))
            return 1
        fi
        if [ -z $rec75];then
            log_status_int "$tier" "FAIL" "Failed for NOT observing Data for Backend Calls in Aggregate File"
            ((countR++))
            return 1
        else
            log_status_int "$tier" "PASS" "Passed for observing Data for Backend Calls in Aggregate File"
        fi
        if [[ ! $(grep "Group:Business Transactions" $TSDB_FILE) ]];then
            log_status_int "$tier" "FAIL" "Failed for Business Transaction graphs not found when BT Monitoring is enabled."
            ((countR++))
            return 1
        else
            log_status_int "$tier" "PASS" "Passed for Business Transaction graphs found when BT Monitoring is enabled."
        fi
        return 0
}
main
