#!/usr/bin/env bash

###################################################################################################
#                                                                                                 #
#   Feature :- NF_ND                                                                              #
#   Developer :- Tushar Raghav	                                                                  #
#   Modified Date :- 20th Dec 2023                                                                # 
#                                                                                                 #
###################################################################################################

source $NS_WDIR/lib/utilities.sh
source $NS_WDIR/lib/smoke.properties

TEST_RUN_PATH="$NS_WDIR/logs/TR$(get_test_idx)"
RAW_DATA_HOME="$NS_WDIR/logs/TR$(get_test_idx)/$(get_test_partition)/nd/raw_data/"
PARTITION_PATH="${NS_WDIR}/logs/TR$(get_test_idx)/$(get_test_partition)"
PM2_LOGS="/home/cavisson/.pm2/logs/www-out-0.log"
TOPO_10_Disable="/home/cavisson/workspace/netjsagent/smoke/testcases/NDSmoke027/Topo_Disable/NodeJS_10"
TOPO_10_Enable="/home/cavisson/workspace/netjsagent/smoke/testcases/NDSmoke027/Topo_Enable/NodeJS_10"
AVAILABLE_TIERS=$Project

function main(){
	case $(get_test_name) in
		"SMOKE-027-001") handle_smoke_013_001_case;;
		"SMOKE-027-002") handle_smoke_013_002_case;;
	        *) handle_unknown_case ;; 
		?) handle_unknown_case ;;
	esac
}

function log_status_int(){
	agentID="$1"
	status="$2"
	why="${3}"
	log_status_and_exit $agentID $productid $categoryid $status "${why}"
}

function handle_unknown_case(){
	error "Testcase name not found"
	log_status_int "FAIL" "Testcase not found"
}

function verify_rawdata(){
        RAW_DATA_FILE=$1
    local eventId0=$(grep -c "^0," $RAW_DATA_FILE)
    local eventId99=$(grep -c "^99," $RAW_DATA_FILE)
    local eventId11=$(grep -c "^11," $RAW_DATA_FILE)
    local eventId2=$(grep -c "^2," $RAW_DATA_FILE)
    local eventId4=$(grep -c "^4," $RAW_DATA_FILE)
    if [ $eventId0 -eq 1 ];then
        log_status_int "${tier}" "FAIL" "Event ID 0  detected: ${eventId0}"
    else
        log_status_int "${tier}" "PASS" "Event ID 0 is not detected: ${eventId0}"
    fi
    if [ $eventId99 -eq 1 ];then
        log_status_int "${tier}" "FAIL" "Event ID 99  detected: ${eventId99}"
    else
        log_status_int "${tier}" "PASS" "Event ID 99 is not detected: ${eventId99}"
    fi
    if [ $eventId11 -eq 1 ];then
        log_status_int "${tier}" "FAIL" "Event ID 11  detected: ${eventId11}"
    else
        log_status_int "${tier}" "PASS" "Event ID 11 is not detected: ${eventId11}"
    fi
    debug "eventId2=$eventId2, eventId4=$eventId4"
    if [ $eventId2 -lt 1 ] || [ $eventId4 -lt 1 ];then
        log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not detected. Number of flowpaths: ${eventId4}"
    else
        log_status_int "${tier}" "PASS" "Event ID 2 and 4 are detected. Number of flowpaths: ${eventId4}"
    fi
    if [ $eventId2 -ne $eventId4 ];then
        log_status_int "${tier}" "FAIL" "Event ID 2 and 4 are not equal. Number of flowpaths: ${eventId4}"
    else
        log_status_int "${tier}" "PASS" "Event ID 2 and 4 are equal. Number of flowpaths: ${eventId4}"
    fi
}

function handle_smoke_013_001_case(){
	for tier in $AVAILABLE_TIERS; do
		if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
		    RAW_FILE=$(ls $RAW_DATA_HOME |egrep "^$tier"|tail -1)
	            DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
		    disable_NF $DATA_FILE
		    RC=$?
		    if [ $count -gt 0 ];then
                	verify_rawdata $DATA_FILE
            	    fi
		    if [ $RC -eq 0 ];then
			    log_status_int "$tier" "pass" "Passed As NF-ND logs for disabled case"
		    fi

        else
            log_status_int "${tier}" "FAIL" "Raw data has not formed for Tier=${tier}"
        fi
	done
}

disable_NF(){
	RAW_DATA_FILE=$1
    	nsu_server_admin -s 10.10.70.39 -z 0 -G "$PM2_LOGS" -f "$TOPO_10_Disable"
	NF_disable=$(grep 'TOPO' "$TOPO_10_Disable" |wc -l)
	if [ $NF_disable -le 0 ];then
        	log_status_int "$tier" "pass" "Passed As NF-ND file do not contain FP TOPO keywords."
    	else
        	log_status_int "$tier" "fail" "Failed As NF-ND file contains FP TOPO keywords."
        	((count++))
		return 1
    	fi
}

function handle_smoke_013_002_case(){
	for tier in $AVAILABLE_TIERS; do
	  if [ $(ls $RAW_DATA_HOME |grep "^$tier"|head -1) ];then
		    RAW_FILE=$(ls $RAW_DATA_HOME |egrep "^$tier"|tail -1)
            	    DATA_FILE=$RAW_DATA_HOME/$(ls $RAW_DATA_HOME |grep "^$tier"|tail -1)
		    enable_NF $DATA_FILE
		    RC=$?
		    if [ $count -gt 0 ];then
                	verify_rawdata $DATA_FILE
            	    fi
		    if [ $RC -eq 0 ];then
			    log_status_int "$tier" "pass" "Passed As NF-ND verified successfully."
		    fi
	  else
		  log_status_int "${tier}" "FAIL" "Raw data has not formed for Tier=${tier}"
	  fi
	done
}

enable_NF(){
	RAW_DATA_FILE=$1
	nsu_server_admin -s 10.10.70.39 -z 0 -G "$PM2_LOGS" -f "$TOPO_10_Enable"
	NF_enable=$(grep -c 'TOPO' $TOPO_10_Enable|wc -l)
    	if [ $NF_enable -gt 0 ];then
        	log_status_int "$tier" "pass" "Passed As NF-ND file contains FP TOPO keywords."
    	else
        	log_status_int "$tier" "fail" "Failed As NF-ND file does not contain FP TOPO keywords."
        	((count++))
		return 1
    	fi

}

main
