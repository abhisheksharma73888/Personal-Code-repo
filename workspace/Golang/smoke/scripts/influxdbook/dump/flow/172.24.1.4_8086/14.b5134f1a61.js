(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{905:function(e,t,a){!function(e){"use strict";e.apache={meta:{name:"Apache Data",type:"dashboard",templateID:"0000000000000001",description:"A template dashboard for use with the Apache Input Plugin in Telegraf.",version:"1"},content:{data:{attributes:{description:"A dashboard for use with the Apache Input Plugin in Telegraf.",name:"Apache Data"},relationships:{cell:{data:[{id:"043be0d4aeeb1000",type:"cell"},{id:"043be26ca2ab1000",type:"cell"},{id:"043be29a563e0000",type:"cell"},{id:"043be2de273dc000",type:"cell"},{id:"043be31c1cbf6000",type:"cell"},{id:"043be3991e146000",type:"cell"},{id:"043be4ab9f8e8000",type:"cell"},{id:"043be4e154dc5000",type:"cell"},{id:"043be5332e146000",type:"cell"},{id:"043be54b96ce8000",type:"cell"},{id:"043be578f2ff6000",type:"cell"},{id:"043be5957935b000",type:"cell"},{id:"043be7acb1d79000",type:"cell"},{id:"043be80ef6d79000",type:"cell"}]},label:{data:[{id:"043be6d68e8a3000",type:"label"}]},variable:{data:[{id:"03f76d549a7bb000",type:"variable"},{id:"043be1ca4e8a3000",type:"variable"}]}},type:"dashboard"},included:[{attributes:{name:"apache",properties:{color:"#326BBA",description:""}},id:"043be6d68e8a3000",type:"label"},{attributes:{h:2,w:2,x:0,y:1},id:"043be0d4aeeb1000",relationships:{view:{data:{id:"043be0d4aeeb1000",type:"view"}}},type:"cell"},{attributes:{h:2,w:2,x:2,y:1},id:"043be26ca2ab1000",relationships:{view:{data:{id:"043be26ca2ab1000",type:"view"}}},type:"cell"},{attributes:{h:2,w:2,x:4,y:1},id:"043be29a563e0000",relationships:{view:{data:{id:"043be29a563e0000",type:"view"}}},type:"cell"},{attributes:{h:4,w:4,x:8,y:3},id:"043be2de273dc000",relationships:{view:{data:{id:"043be2de273dc000",type:"view"}}},type:"cell"},{attributes:{h:2,w:6,x:6,y:1},id:"043be31c1cbf6000",relationships:{view:{data:{id:"043be31c1cbf6000",type:"view"}}},type:"cell"},{attributes:{h:4,w:4,x:4,y:3},id:"043be3991e146000",relationships:{view:{data:{id:"043be3991e146000",type:"view"}}},type:"cell"},{attributes:{h:4,w:4,x:4,y:7},id:"043be4ab9f8e8000",relationships:{view:{data:{id:"043be4ab9f8e8000",type:"view"}}},type:"cell"},{attributes:{h:4,w:4,x:8,y:7},id:"043be4e154dc5000",relationships:{view:{data:{id:"043be4e154dc5000",type:"view"}}},type:"cell"},{attributes:{h:3,w:12,x:0,y:11},id:"043be5332e146000",relationships:{view:{data:{id:"043be5332e146000",type:"view"}}},type:"cell"},{attributes:{h:4,w:4,x:0,y:7},id:"043be54b96ce8000",relationships:{view:{data:{id:"043be54b96ce8000",type:"view"}}},type:"cell"},{attributes:{h:2,w:4,x:0,y:5},id:"043be578f2ff6000",relationships:{view:{data:{id:"043be578f2ff6000",type:"view"}}},type:"cell"},{attributes:{h:2,w:4,x:0,y:3},id:"043be5957935b000",relationships:{view:{data:{id:"043be5957935b000",type:"view"}}},type:"cell"},{attributes:{h:1,w:12,x:0,y:0},id:"043be7acb1d79000",relationships:{view:{data:{id:"043be7acb1d79000",type:"view"}}},type:"cell"},{attributes:{h:5,w:7,x:0,y:14},id:"043be80ef6d79000",relationships:{view:{data:{id:"043be80ef6d79000",type:"view"}}},type:"cell"},{attributes:{name:"Apache Uptime",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r._field == "Uptime")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> last()\n  |> map(fn: (r) => ({_value : r._value / 60.0 / 60.0 / 24.0}))'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:" d",type:"single-stat"}},id:"043be0d4aeeb1000",type:"view"},{attributes:{name:"CPUs",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "n_cpus")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> window(period: v.windowPeriod)\n  |> last()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "last")'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:"",type:"single-stat"}},id:"043be26ca2ab1000",type:"view"},{attributes:{name:"Memory",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "total")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> last()\n  |> map(fn: (r) => ({_value: r._value / 1024 / 1024 / 1024}))'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:" GB",type:"single-stat"}},id:"043be29a563e0000",type:"view"},{attributes:{name:"Load",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r._field == "Load1" or r._field == "Load15" or r._field == "Load5")\n  |> filter(fn: (r) => r.host == v.apache_host)\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"043be2de273dc000",type:"view"},{attributes:{name:"Memory Used",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},legend:{},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> filter(fn: (r) => r.host == v.apache_host)\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:"%",type:"line-plus-single-stat",xColumn:"_time",yColumn:"_value"}},id:"043be31c1cbf6000",type:"view"},{attributes:{name:"CPU Load (System, User)",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r._field == "CPUSystem" or r._field == "CPUUser")  \n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"043be3991e146000",type:"view"},{attributes:{name:"Disk IO",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "diskio")\n  |> filter(fn: (r) => r._field == "read_bytes" or r._field == "write_bytes")  \n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> derivative(unit: v.windowPeriod, nonNegative: false)\n  |> yield(name: "derivative")\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"043be4ab9f8e8000",type:"view"},{attributes:{name:"Network",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "net")\n  |> filter(fn: (r) => r._field == "bytes_recv" or r._field == "bytes_sent")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> derivative(unit: v.windowPeriod, nonNegative: false)\n  |> yield(name: "derivative")\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"043be4e154dc5000",type:"view"},{attributes:{name:"Scoreboard",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> filter(fn: (r) => r._field =~ /^scboard_*/)\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"043be5332e146000",type:"view"},{attributes:{name:"Workers",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> filter(fn: (r) => r._field == "IdleWorkers" or r._field == "BusyWorkers")\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"043be54b96ce8000",type:"view"},{attributes:{name:"Requests per Second",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},legend:{},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> filter(fn: (r) => r._field == "ReqPerSec")\n'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:" r/s",type:"line-plus-single-stat",xColumn:"_time",yColumn:"_value"}},id:"043be578f2ff6000",type:"view"},{attributes:{name:"Bytes per Second",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},legend:{},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "apache")\n  |> filter(fn: (r) => r.host == v.apache_host)\n  |> filter(fn: (r) => r._field == "BytesPerSec")'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:" B/s",type:"line-plus-single-stat",xColumn:"_time",yColumn:"_value"}},id:"043be5957935b000",type:"view"},{attributes:{name:"Name this Cell",properties:{note:"#### This dashboard is designed to work with the [Apache Input Plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/apache) from Telegraf to give you an overview of your Apache servers. It includes metrics from the following plugins: `system`, `mem`, `diskio`, `net`, and `apache`. An example Telegraf config can be found at the bottom of this dashboard.",shape:"chronograf-v2",type:"markdown"}},id:"043be7acb1d79000",type:"view"},{attributes:{name:"Name this Cell",properties:{note:'Example Telegraf config:\n```\n[[inputs.cpu]]\n  percpu = true\n  totalcpu = true\n  collect_cpu_time = true\n  report_active = true\n[[inputs.disk]]\n[[inputs.diskio]]\n[[inputs.mem]]\n[[inputs.net]]\n[[inputs.netstat]]\n[[inputs.system]]\n\n# Read Apache status information (mod_status)\n[[inputs.apache]]\n  ## An array of URLs to gather from, must be directed at the machine\n  ## readable version of the mod_status page including the auto query string.\n  ## Default is "http://localhost/server-status?auto".\n  urls = ["http://localhost:8080/server-status?auto"]\n```',shape:"chronograf-v2",type:"markdown"}},id:"043be80ef6d79000",type:"view"},{attributes:{arguments:{type:"query",values:{language:"flux",query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n'}},name:"bucket",selected:null},id:"03f76d549a7bb000",relationships:{label:{data:[]}},type:"variable"},{attributes:{arguments:{type:"query",values:{language:"flux",query:'import "influxdata/influxdb/v1"\n\nv1.measurementTagValues(bucket: v.bucket, measurement: "apache", tag: "host")'}},name:"apache_host",selected:null},id:"043be1ca4e8a3000",relationships:{label:{data:[{id:"043be6d68e8a3000",type:"label"}]}},type:"variable"}]},labels:[]},e.docker={meta:{version:"1",name:"Docker",templateID:"0000000000000002",description:"template created from dashboard: Docker",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"Docker",description:"A collection of useful visualizations for monitoring your system stats"},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03f492401d52c000"},{type:"cell",id:"03f492401e92c000"},{type:"cell",id:"03f492405d52c000"},{type:"cell",id:"03f492405f12c000"},{type:"cell",id:"03f492406192c000"},{type:"cell",id:"03f492406252c000"},{type:"cell",id:"03f492406352c000"},{type:"cell",id:"03f492406392c000"},{type:"cell",id:"03f492406412c000"},{type:"cell",id:"03f492406512c000"},{type:"cell",id:"03f4924065d2c000"},{type:"cell",id:"03f4924066d2c000"},{type:"cell",id:"03f492406792c000"},{type:"cell",id:"03f492406892c000"},{type:"cell",id:"03f492406992c000"},{type:"cell",id:"03f492406a12c000"},{type:"cell",id:"03f492406a92c000"},{type:"cell",id:"03f492406b12c000"}]},variable:{data:[{type:"variable",id:"03f454da5512c000"}]}}},included:[{id:"03f492401d52c000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03f492401d52c000"}}}},{id:"03f492401e92c000",type:"cell",attributes:{x:7,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f492401e92c000"}}}},{id:"03f492405d52c000",type:"cell",attributes:{x:0,y:1,w:3,h:1},relationships:{view:{data:{type:"view",id:"03f492405d52c000"}}}},{id:"03f492405f12c000",type:"cell",attributes:{x:0,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492405f12c000"}}}},{id:"03f492406192c000",type:"cell",attributes:{x:9,y:3,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f492406192c000"}}}},{id:"03f492406252c000",type:"cell",attributes:{x:9,y:1,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f492406252c000"}}}},{id:"03f492406352c000",type:"cell",attributes:{x:6,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406352c000"}}}},{id:"03f492406392c000",type:"cell",attributes:{x:3,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406392c000"}}}},{id:"03f492406412c000",type:"cell",attributes:{x:3,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f492406412c000"}}}},{id:"03f492406512c000",type:"cell",attributes:{x:5,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f492406512c000"}}}},{id:"03f4924065d2c000",type:"cell",attributes:{x:0,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4924065d2c000"}}}},{id:"03f4924066d2c000",type:"cell",attributes:{x:9,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4924066d2c000"}}}},{id:"03f492406792c000",type:"cell",attributes:{x:3,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406792c000"}}}},{id:"03f492406892c000",type:"cell",attributes:{x:6,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406892c000"}}}},{id:"03f492406992c000",type:"cell",attributes:{x:0,y:8,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406992c000"}}}},{id:"03f492406a12c000",type:"cell",attributes:{x:6,y:8,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406a12c000"}}}},{id:"03f492406a92c000",type:"cell",attributes:{x:9,y:8,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406a92c000"}}}},{id:"03f492406b12c000",type:"cell",attributes:{x:3,y:8,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f492406b12c000"}}}},{type:"view",id:"03f492401d52c000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"This dashboard gives you an overview of [Docker](https://docker.com) metrics. See the [Telegraf Documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/docker) for help configuring these plugins."}}},{type:"view",id:"03f492401e92c000",attributes:{name:"Total Memory",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "total")\n  |> window(period: v.windowPeriod)\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1024.0 / 1024.0 / 1024.0}))\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "last")\n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" GB",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492405d52c000",attributes:{name:"System Uptime",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "uptime")\n  |> window(period: 1h)\n  |> last()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 86400.0}))\n  |> yield(name: "last")\n  \n  \n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" days",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!1,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492405f12c000",attributes:{name:"Disk Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "disk")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406192c000",attributes:{name:"Swap",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "swap")\n  |> filter(fn: (r) => r._field == "total" or r._field == "used")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406252c000",attributes:{name:"Memory Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0},{id:"c2f922df-60a1-4471-91fc-c16427e7fcfb",type:"scale",hex:"#8F8AF4",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"330f7fee-d44e-4a15-b2d6-2330178ec203",type:"scale",hex:"#A51414",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"e3c73eb3-665a-414b-afdd-1686c9b962d9",type:"scale",hex:"#F4CF31",name:"Do Androids Dream of Electric Sheep?",value:0}],prefix:"",suffix:"%",decimalPlaces:{isEnforced:!0,digits:1},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406352c000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Load",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406392c000",attributes:{name:"CPU Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user" or r._field == "usage_system" or r._field == "usage_idle")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406412c000",attributes:{name:"nCPUs",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "n_cpus")\n  |> window(period: v.windowPeriod)\n  |> last()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" cpus",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406512c000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4924065d2c000",attributes:{name:"Number of Docker containers ",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket:v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker")\n  |> filter(fn: (r) => r._field == "n_containers" or r._field == "n_containers_paused" or r._field == "n_containers_running" or r._field == "n_containers_stopped")\n |> window(period: v.windowPeriod)\n |> mean()\n |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4924066d2c000",attributes:{name:"Memory usage per container",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker_container_mem")\n  |> filter(fn: (r) => r._field == "usage")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406792c000",attributes:{name:"CPU usage per container",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu" or r._measurement == "docker_container_cpu")\n  |> filter(fn: (r) => r._field == "usage_percent")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406892c000",attributes:{name:"Memory usage % per container",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker_container_mem")\n  |> filter(fn: (r) => r._field == "usage_percent")\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406992c000",attributes:{name:"Network TX trafic per container / sec",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker_container_net")\n  |> filter(fn: (r) => r._field == "tx_bytes")  \n  |> derivative(unit: 1s, nonNegative: false)\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Bytes",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406a12c000",attributes:{name:"Disk I/O read per container / sec",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker_container_blkio")\n  |> filter(fn: (r) => r._field == "io_service_bytes_recursive_read")\n  |> derivative(unit: 1s, nonNegative: false)\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Bytes",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"6d613468-d49b-4cac-b46e-dd21c0dfa187",type:"scale",hex:"#74D495",name:"Atlantis",value:0},{id:"9b58cbce-b5ae-420a-8da1-83a883ae0c36",type:"scale",hex:"#3F3FBA",name:"Atlantis",value:0},{id:"8cffc601-ed7c-4a0c-8bca-f5f50036f5ec",type:"scale",hex:"#FF4D9E",name:"Atlantis",value:0}],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406a92c000",attributes:{name:"Disk I/O write per container / sec",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker_container_blkio")\n  |> filter(fn: (r) =>  r._field == "io_service_bytes_recursive_write")\n  |> derivative(unit: 1s, nonNegative: false)\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Bytes",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"36fb2e03-6f87-4e03-ad73-3c702f0b32a3",type:"scale",hex:"#FDC44F",name:"Cthulhu",value:0},{id:"d80fbd9e-25a1-47b9-8b8e-cfac3cbbe7ac",type:"scale",hex:"#007C76",name:"Cthulhu",value:0},{id:"9a17e08d-e044-4d2b-a535-16f90c933a29",type:"scale",hex:"#8983FF",name:"Cthulhu",value:0}],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f492406b12c000",attributes:{name:"Network RX trafic per container / sec",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "docker_container_net")\n  |> filter(fn: (r) => r._field == "rx_bytes" )\n  |> derivative(unit: 1s, nonNegative: false)\n  |> window(period: v.windowPeriod)\n  |> mean()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> keep(columns: ["_measurement","container_name", "host","_value","_field","_stop"])\n  |> yield(name: "mean")\n\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Bytes",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"36fb2e03-6f87-4e03-ad73-3c702f0b32a3",type:"scale",hex:"#FDC44F",name:"Cthulhu",value:0},{id:"d80fbd9e-25a1-47b9-8b8e-cfac3cbbe7ac",type:"scale",hex:"#007C76",name:"Cthulhu",value:0},{id:"9a17e08d-e044-4d2b-a535-16f90c933a29",type:"scale",hex:"#8983FF",name:"Cthulhu",value:0}],note:"",showNoteWhenEmpty:!1}}},{id:"03f454da5512c000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.gettingStarted={meta:{version:"1",name:"Getting Started with Flux",templateID:"0000000000000003",description:"template created from dashboard: Getting Started with Flux",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"Getting Started with Flux",description:""},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03d3aa9d5e506000"},{type:"cell",id:"03d3aa9d61906000"},{type:"cell",id:"03d3aa9d63506000"},{type:"cell",id:"03d3aa9d65506000"},{type:"cell",id:"03d3aa9d67906000"},{type:"cell",id:"03d3aa9d6c906000"},{type:"cell",id:"03d3aa9d79906000"},{type:"cell",id:"03d3aa9d7dd06000"},{type:"cell",id:"03d3aa9d7f906000"},{type:"cell",id:"03d3aa9d81906000"},{type:"cell",id:"03d3aa9d83906000"},{type:"cell",id:"03d3aa9d87d06000"},{type:"cell",id:"03d3aa9d8b906000"},{type:"cell",id:"03d3aa9d8dd06000"}]},variable:{data:[{type:"variable",id:"03d39fa6bd106000"}]}}},included:[{id:"03d3aa9d5e506000",type:"cell",attributes:{x:0,y:1,w:6,h:6},relationships:{view:{data:{type:"view",id:"03d3aa9d5e506000"}}}},{id:"03d3aa9d61906000",type:"cell",attributes:{x:6,y:1,w:6,h:6},relationships:{view:{data:{type:"view",id:"03d3aa9d61906000"}}}},{id:"03d3aa9d63506000",type:"cell",attributes:{x:0,y:11,w:6,h:5},relationships:{view:{data:{type:"view",id:"03d3aa9d63506000"}}}},{id:"03d3aa9d65506000",type:"cell",attributes:{x:6,y:11,w:6,h:5},relationships:{view:{data:{type:"view",id:"03d3aa9d65506000"}}}},{id:"03d3aa9d67906000",type:"cell",attributes:{x:0,y:7,w:6,h:4},relationships:{view:{data:{type:"view",id:"03d3aa9d67906000"}}}},{id:"03d3aa9d6c906000",type:"cell",attributes:{x:6,y:7,w:6,h:4},relationships:{view:{data:{type:"view",id:"03d3aa9d6c906000"}}}},{id:"03d3aa9d79906000",type:"cell",attributes:{x:0,y:16,w:6,h:5},relationships:{view:{data:{type:"view",id:"03d3aa9d79906000"}}}},{id:"03d3aa9d7dd06000",type:"cell",attributes:{x:6,y:16,w:6,h:5},relationships:{view:{data:{type:"view",id:"03d3aa9d7dd06000"}}}},{id:"03d3aa9d7f906000",type:"cell",attributes:{x:0,y:27,w:6,h:7},relationships:{view:{data:{type:"view",id:"03d3aa9d7f906000"}}}},{id:"03d3aa9d81906000",type:"cell",attributes:{x:6,y:27,w:6,h:7},relationships:{view:{data:{type:"view",id:"03d3aa9d81906000"}}}},{id:"03d3aa9d83906000",type:"cell",attributes:{x:0,y:21,w:6,h:6},relationships:{view:{data:{type:"view",id:"03d3aa9d83906000"}}}},{id:"03d3aa9d87d06000",type:"cell",attributes:{x:6,y:21,w:6,h:6},relationships:{view:{data:{type:"view",id:"03d3aa9d87d06000"}}}},{id:"03d3aa9d8b906000",type:"cell",attributes:{x:0,y:34,w:12,h:1},relationships:{view:{data:{type:"view",id:"03d3aa9d8b906000"}}}},{id:"03d3aa9d8dd06000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03d3aa9d8dd06000"}}}},{type:"view",id:"03d3aa9d5e506000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"## Your First Flux Query\n\nThe Graph vizualization in the cell to the right contains all the data that Telegraf is sending to InfluxDB, using the most basic Flux query we can construct.\n\nEvery Flux query needs at least two things to be valid: first, we'll need a `from()` function to specify where we the data we are going to query is coming from:\n\n```flux\nfrom(bucket: v.bucket)\n```\nWait, what's `v.bucket`? That's a predefined variable that we provided so that you could name your bucket whatever you'd like. Learn more about them [here](https://v2.docs.influxdata.com/v2.0/visualize-data/variables/).\n\nThe second piece we need is to use Flux's \"pipe forward\" (`|>`) operator to forward the data into our next function, `range()`. This will put bounds on the time range of the data being queried.\n\nInfluxDB 2.0 provides built-in variables to make it easier to build dashboards. Here, we're using the `v.timeRange*` variables as parameters in our range function. The dashboard should be set to \"Past 5m\" by default, so this will limit our query to the last five minutes of data. The setting is in the upper-right hand corner; if it's been changed, you should change it back before continuing.\n```\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n```\n\nIf you roll over the graph, you can scroll through the pop-up legend to see all the various time series that Telegraf is collecting. There's a lot there! Too much, actually. This isn't generally a query you'd want to run in production. In fact, we're going to limit the number of results, just in case:\n\n```\n  |> limit(n: 5000)\n```\n\nFor more information, check out the documentation for the [from](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/inputs/from/), [range](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/filter/), and [limit](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/limit/) functions."}}},{type:"view",id:"03d3aa9d61906000",attributes:{name:"My First Flux Query",properties:{shape:"chronograf-v2",queries:[{text:"from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> limit(n: 5000)",editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["0","100"],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"# Uh oh, something has gone wrong!\n\nIf you're seeing this note, it means the queries running in this cell aren't returning any data. That might mean that your Telegraf instance hasn't sent any data to InfluxDB during the time range set in the Dashboard, or it might mean there is no data at all. Please install Telegraf or check your Telegraf configuration before continuing.\n\nYou can find detailed information about [setting up Telegraf in the InfluxDB 2.0 Documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).\n\nYou should configure the following plugins:\n\n- cpu\n- disk\n- network\n\nIf you need additional help, the best place to ask questions is on the [community site](https://community.influxdata.com/).",showNoteWhenEmpty:!0}}},{type:"view",id:"03d3aa9d63506000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:'# Windowing Data\n\nWindowing is a common function that can be used to compute aggregates of the data.\n\n```flux\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n```\n\nAnd then we add:\n\n```flux\n  |> window(every: 15s)\n```\n\nThe data is returned to us as an individual time series for each window. If you edit the cell to the right, you can toggle the ["Raw Data" view](https://v2.docs.influxdata.com/v2.0/visualize-data/explore-metrics/#visualize-your-query).\n\nYou\'ll see each of the individual tables. These are each graphed in a different color. If you notice, there are gaps between the windows. This is because Flux only connects the points within the same time series, but all the data is still represented.\n\nFor more information, check out the documentation for the [window](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/window/) function.'}}},{type:"view",id:"03d3aa9d65506000",attributes:{name:"Windowing Data",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  |> window(every: 30s)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["0","100"],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"# Uh oh, something has gone wrong!\n\nIf you're seeing this note, it means the queries running in this cell aren't returning any data. That might mean that your Telegraf instance hasn't sent any data to InfluxDB during the time range set in the Dashboard, or it might mean there is no data at all. Please install Telegraf or check your Telegraf configuration before continuing.\n\nYou can find detailed information about [setting up Telegraf in the InfluxDB 2.0 Documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).\n\nYou should configure the following plugins:\n\n- cpu\n- disk\n- network\n\nIf you need additional help, the best place to ask questions is on the [community site](https://community.influxdata.com/).",showNoteWhenEmpty:!0}}},{type:"view",id:"03d3aa9d67906000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:'## Filtering Data\n\nThat first graph has a lot of data on it, which can make it hard to read. We can use the `filter()` function to continue to narrow down the number of series we return.\n\nWe\'ll use the same query as before:\n\n```flux\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n```\nBut this time we\'ll continue to narrow down our results using additional `filter()` functions:\n\n```flux\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n```\n\nThe filter function takes a function as a paremeter. This function takes one parameter itself, `r`, which are the results of a query. It then looks for every row where the function returns true. The result, graphed on the right, is a single time series which represents the overall CPU usage across all cores by the user.\n\nFor more information, check out the documentation for the [filter](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/filter/) function.'}}},{type:"view",id:"03d3aa9d6c906000",attributes:{name:"Filtering Data",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["0","100"],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"# Uh oh, something has gone wrong!\n\nIf you're seeing this note, it means the queries running in this cell aren't returning any data. That might mean that your Telegraf instance hasn't sent any data to InfluxDB during the time range set in the Dashboard, or it might mean there is no data at all. Please install Telegraf or check your Telegraf configuration before continuing.\n\nYou can find detailed information about [setting up Telegraf in the InfluxDB 2.0 Documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).\n\nYou should configure the following plugins:\n\n- cpu\n- disk\n- network\n\nIf you need additional help, the best place to ask questions is on the [community site](https://community.influxdata.com/).",showNoteWhenEmpty:!0}}},{type:"view",id:"03d3aa9d79906000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:'# Aggregation\n\nOnce we\'ve windowed the data, using those windows to calculate an aggregate is a common next step. We\'ll use the same `from()`, `range()`, and `filter()` functions as before:\n\n```flux\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n```\n\nbut instead of using the `window()` function we\'ll use `aggregateWindow()`, a function written in Flux that will first window the data and then apply an aggregate:\n\n```flux\n  |> aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n```\n\nChronograf lets us add additional queries in tabs in the cell editor, and we can use that functionality to graph the original data alongside the aggregated data. It\'s the same query, minus the `aggregateWindow` line.\n\nFor more information, check out the documentation for the [aggregateWindow](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/aggregates/aggregatewindow/) function.'}}},{type:"view",id:"03d3aa9d7dd06000",attributes:{name:"Aggregated Data",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}},{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["0","100"],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"# Uh oh, something has gone wrong!\n\nIf you're seeing this note, it means the queries running in this cell aren't returning any data. That might mean that your Telegraf instance hasn't sent any data to InfluxDB during the time range set in the Dashboard, or it might mean there is no data at all. Please install Telegraf or check your Telegraf configuration before continuing.\n\nYou can find detailed information about [setting up Telegraf in the InfluxDB 2.0 Documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).\n\nYou should configure the following plugins:\n\n- cpu\n- disk\n- network\n\nIf you need additional help, the best place to ask questions is on the [community site](https://community.influxdata.com/).",showNoteWhenEmpty:!0}}},{type:"view",id:"03d3aa9d7f906000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:'# Joins & Maps\n\nJoins and maps are powerful tools that let you combine and transform data. We can use them for a variety of tasks, including performing math across measurements. Let\'s add the values for CPU usage for the tags `usage_user` and `usage_system`.\n\nFirst, we need two variables to store those series. Those will be `usage_user_series` and `usage_system_series`, and are defined the same way as we did in the previous example.\n\nWith that data stored, we can continue constructing the query with a join:\n\n```\njoin(tables: {key1: usage_user_series, key2: usage_system_series}, \n     on: ["_time", "_measurement", "_start", "_stop", "cpu", "host"], \n     method: "inner")\n```\nThis will comine the two tables using an inner join on the columns we specify in the `on` parameter. It will give us a new table with the `_field` columns from the first table renamed to `_field_key1` and `_field_key2`. With the data all in one table, we can use the `map` function to add those two columns together: \n\n```\n  |> map(fn: (r) => ({\n    _time: r._time,\n    _value: r._value_key1 + r._value_key2,\n    _field: r._field_key1 + "+" + r._field_key2\n  }))\n```\nFinally, we want to make sure the group key is properly set, and drop the two columns we added, which we no longer need:\n```\n  |> group(columns: ["_start", "_stop", "_measurement", "_field", "cpu", "host"])\n  |> drop(columns: ["_field_key1", "_field_key2"])\n```\n\nFor more information, check out the documentation for the [join](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/join/), [map](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/map/), [group](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/group/), and [drop](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/transformations/drop/) functions.'}}},{type:"view",id:"03d3aa9d81906000",attributes:{name:"Joins & Maps",properties:{shape:"chronograf-v2",queries:[{text:'usage_user_series = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  \nusage_system_series = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_system")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  \njoin(tables: {key1: usage_user_series, key2: usage_system_series}, \n     on: ["_time", "_measurement", "_start", "_stop", "cpu", "host"], \n     method: "inner")\n  |> map(fn: (r) => ({\n    _time: r._time,\n    _value: r._value_key1 + r._value_key2,\n    _field: r._field_key1 + "+" + r._field_key2\n  }))\n  |> group(columns: ["_start", "_stop", "_measurement", "_field", "cpu", "host"])\n  |> drop(columns: ["_field_key1", "_field_key2"])',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}},{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_system")\n  |> filter(fn: (r) => r.cpu == "cpu-total")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}},{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["0","100"],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"# Uh oh, something has gone wrong!\n\nIf you're seeing this note, it means the queries running in this cell aren't returning any data. That might mean that your Telegraf instance hasn't sent any data to InfluxDB during the time range set in the Dashboard, or it might mean there is no data at all. Please install Telegraf or check your Telegraf configuration before continuing.\n\nYou can find detailed information about [setting up Telegraf in the InfluxDB 2.0 Documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).\n\nYou should configure the following plugins:\n\n- cpu\n- disk\n- network\n\nIf you need additional help, the best place to ask questions is on the [community site](https://community.influxdata.com/).",showNoteWhenEmpty:!0}}},{type:"view",id:"03d3aa9d83906000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:'# Multiple aggregates using Flux variables\n\nOne thing to be aware of with aggregations is the way it changes the shape of our data. We\'ll use another feature of Flux, variables, to calculate several aggregates based on stored data. First, we\'ll create a variable to store the same data we\'ve been working with so far:\n\n```flux\ncpu_usage_user = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n```\n\nNow that the result has been stored in a variable, we can invoke it and pipe-forward the data first to an aggregateWindow function, and then to the yield function, which will let us specify what the resulting time series will be named:\n\n```flux\ncpu_usage_user \n  |> aggregateWindow(every: 15s, fn: mean, createEmpty: false)\n  |> yield(name: "mean_result")\n```\n\nAnd we can have a second function that applies a different aggregate:\n\n```  \ncpu_usage_user \n  |> aggregateWindow(every: 15s, fn: count)\n  |> yield(name: "count_result")\n```\n\nFor more information, check out the documentation for the [yield](https://v2.docs.influxdata.com/v2.0/reference/flux/functions/built-in/outputs/yield/) function.'}}},{type:"view",id:"03d3aa9d87d06000",attributes:{name:"Multiple Aggregates Using Flux Variables",properties:{shape:"chronograf-v2",queries:[{text:'cpu_usage_user = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  \ncpu_usage_user\n  |> aggregateWindow(every: 30s, fn: mean, createEmpty: false)\n  |> yield(name: "mean_result")\n  \ncpu_usage_user\n  |> aggregateWindow(every: 30s, fn: count)\n  |> yield(name: "count_result")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}},{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user")\n  |> filter(fn: (r) => r.cpu == "cpu-total")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["0","100"],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"# Uh oh, something has gone wrong!\n\nIf you're seeing this note, it means the queries running in this cell aren't returning any data. That might mean that your Telegraf instance hasn't sent any data to InfluxDB during the time range set in the Dashboard, or it might mean there is no data at all. Please install Telegraf or check your Telegraf configuration before continuing.\n\nYou can find detailed information about [setting up Telegraf in the InfluxDB 2.0 Documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).\n\nYou should configure the following plugins:\n\n- cpu\n- disk\n- network\n\nIf you need additional help, the best place to ask questions is on the [community site](https://community.influxdata.com/).",showNoteWhenEmpty:!0}}},{type:"view",id:"03d3aa9d8b906000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"## Thank you for joining us!\n\nIf you have any questions on your journey, please check out the [community site](https://community.influxdata.com)."}}},{type:"view",id:"03d3aa9d8dd06000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"#\nThis dashboard is designed to get you started with the [Flux language](https://v2.docs.influxdata.com/v2.0/reference/flux/). In order to use this, you will need to have data in your InfluxDB 2.0 instance. Just follow the instructions to [set up the Telegraf data agent](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/) from our documentation and you should be all set. If you have data in your system and still don't see any graphs, click the `Variables` button in the top right of the dashboard and select the bucket with your data."}}},{id:"03d39fa6bd106000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.github={meta:{name:"GitHub Data",type:"dashboard",templateID:"0000000000000004",description:"A template dashboard for use with the GitHub Input Plugin in Telegraf.",version:"1"},content:{data:{attributes:{description:"A dashboard for use with the GitHub Input Plugin in Telegraf.",name:"GitHub Data"},relationships:{cell:{data:[{id:"0432f3ee24d8d000",type:"cell"},{id:"0432f40237887000",type:"cell"},{id:"0432f4117445d000",type:"cell"},{id:"0432f59f05106000",type:"cell"},{id:"0432f869d789a000",type:"cell"},{id:"0433e01cbde6d000",type:"cell"},{id:"0433e04001c87000",type:"cell"},{id:"0433e04d17d18000",type:"cell"},{id:"0433e053c08b9000",type:"cell"},{id:"043bcdd8088a3000",type:"cell"},{id:"043bce9a892b1000",type:"cell"}]},label:{data:[]},variable:{data:[{id:"03f76d549a7bb000",type:"variable"},{id:"0432f5323ddeb000",type:"variable"}]}},type:"dashboard"},included:[{attributes:{h:4,w:6,x:6,y:8},id:"0432f3ee24d8d000",relationships:{view:{data:{id:"0432f3ee24d8d000",type:"view"}}},type:"cell"},{attributes:{h:4,w:6,x:6,y:4},id:"0432f40237887000",relationships:{view:{data:{id:"0432f40237887000",type:"view"}}},type:"cell"},{attributes:{h:4,w:6,x:0,y:4},id:"0432f4117445d000",relationships:{view:{data:{id:"0432f4117445d000",type:"view"}}},type:"cell"},{attributes:{h:4,w:6,x:0,y:8},id:"0432f59f05106000",relationships:{view:{data:{id:"0432f59f05106000",type:"view"}}},type:"cell"},{attributes:{h:5,w:12,x:0,y:12},id:"0432f869d789a000",relationships:{view:{data:{id:"0432f869d789a000",type:"view"}}},type:"cell"},{attributes:{h:3,w:3,x:0,y:1},id:"0433e01cbde6d000",relationships:{view:{data:{id:"0433e01cbde6d000",type:"view"}}},type:"cell"},{attributes:{h:3,w:3,x:3,y:1},id:"0433e04001c87000",relationships:{view:{data:{id:"0433e04001c87000",type:"view"}}},type:"cell"},{attributes:{h:3,w:3,x:6,y:1},id:"0433e04d17d18000",relationships:{view:{data:{id:"0433e04d17d18000",type:"view"}}},type:"cell"},{attributes:{h:3,w:3,x:9,y:1},id:"0433e053c08b9000",relationships:{view:{data:{id:"0433e053c08b9000",type:"view"}}},type:"cell"},{attributes:{h:1,w:12,x:0,y:0},id:"043bcdd8088a3000",relationships:{view:{data:{id:"043bcdd8088a3000",type:"view"}}},type:"cell"},{attributes:{h:4,w:6,x:0,y:17},id:"043bce9a892b1000",relationships:{view:{data:{id:"043bce9a892b1000",type:"view"}}},type:"cell"},{attributes:{name:"Issues",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "open_issues")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"",yColumn:""}},id:"0432f3ee24d8d000",type:"view"},{attributes:{name:"Size (bytes)",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "size")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"0432f40237887000",type:"view"},{attributes:{name:"Forks",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "forks")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"0432f4117445d000",type:"view"},{attributes:{name:"Stars",properties:{axes:{x:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""},y:{base:"10",bounds:["",""],label:"",prefix:"",scale:"linear",suffix:""}},colors:[],geom:"line",legend:{},note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "stars")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)'}],shadeBelow:!1,shape:"chronograf-v2",showNoteWhenEmpty:!1,type:"xy",xColumn:"_time",yColumn:"_value"}},id:"0432f59f05106000",type:"view"},{attributes:{name:"Summary Table",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!1},fieldOptions:[{displayName:"",internalName:"",visible:!0},{displayName:"result",internalName:"result",visible:!0},{displayName:"table",internalName:"table",visible:!0},{displayName:"name",internalName:"name",visible:!0},{displayName:"forks",internalName:"forks",visible:!0},{displayName:"open_issues",internalName:"open_issues",visible:!0},{displayName:"size",internalName:"size",visible:!0},{displayName:"stars",internalName:"stars",visible:!0}],note:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: -5m)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> aggregateWindow(every: v.windowPeriod, fn: last)\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)\n  |> last()\n  |> group()\n  |> drop(columns: ["_start", "_stop","_time","language","license","owner","_measurement","host"])\n  |> pivot(rowKey:["name"], columnKey: ["_field"], valueColumn: "_value")\n  |> yield(name: "last")'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,tableOptions:{fixFirstColumn:!1,sortBy:{displayName:"",internalName:"",visible:!1},verticalTimeAxis:!0,wrapping:""},timeFormat:"YYYY-MM-DD HH:mm:ss",type:"table"}},id:"0432f869d789a000",type:"view"},{attributes:{name:"Total Forks",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: -5m)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "forks")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)\n  |> last()\n  |> group()\n  |> aggregateWindow(every: 60s, fn: sum)\n  |> last()'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:"",type:"single-stat"}},id:"0433e01cbde6d000",type:"view"},{attributes:{name:"Total Size (bytes)",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: -5m)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "size")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)\n  |> last()\n  |> group()\n  |> aggregateWindow(every: 60s, fn: sum)\n  |> last()'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:" b",type:"single-stat"}},id:"0433e04001c87000",type:"view"},{attributes:{name:"Total Stars",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: -5m)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "stars")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)\n  |> last()\n  |> group()\n  |> aggregateWindow(every: 60s, fn: sum)\n  |> last()'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:"",type:"single-stat"}},id:"0433e04d17d18000",type:"view"},{attributes:{name:"Total Open Issues",properties:{colors:[{hex:"#00C9FF",id:"base",name:"laser",type:"text",value:0}],decimalPlaces:{digits:2,isEnforced:!0},note:"",prefix:"",queries:[{builderConfig:{aggregateWindow:{period:"auto"},buckets:[],functions:[],tags:[{key:"_measurement",values:[]}]},editMode:"advanced",name:"",text:'from(bucket: v.bucket)\n  |> range(start: -5m)\n  |> filter(fn: (r) => r._measurement == "github_repository")\n  |> filter(fn: (r) => r._field == "open_issues")\n  |> filter(fn: (r) => if v.repo != "*" then r.name == v.repo else true)\n  |> last()\n  |> group()\n  |> aggregateWindow(every: 60s, fn: sum)\n  |> last()'}],shape:"chronograf-v2",showNoteWhenEmpty:!1,suffix:"",type:"single-stat"}},id:"0433e053c08b9000",type:"view"},{attributes:{name:"Name this Cell",properties:{note:"    \n    \n#### This dashboard shows the metrics collected by the [GitHub Input Plugin](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/github) in Telegraf. An example configuration is in a note at the bottom of the Dashboard.",shape:"chronograf-v2",type:"markdown"}},id:"043bcdd8088a3000",type:"view"},{attributes:{name:"Name this Cell",properties:{note:'Example Telegraf 1.11 Configuration:\n\n```\n[[inputs.github]]\n  ## List of repositories to monitor\n  repositories = [\n        "influxdata/influxdb",\n        "influxdata/telegraf",\n        "influxdata/kapacitor",\n        "influxdata/chronograf",\n        "influxdata/flux"\n  ]\n\n  ## Github API access token generated from https://github.com/settings/tokens.  \n  ## Unauthenticated requests are limited to 60 per hour.\n  access_token = "TOKEN"\n\n  interval = "1m"\n\n  ## Timeout for HTTP requests.\n  # http_timeout = "5s"\n```',shape:"chronograf-v2",type:"markdown"}},id:"043bce9a892b1000",type:"view"},{attributes:{arguments:{type:"query",values:{language:"flux",query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n'}},name:"bucket",selected:null},id:"03f76d549a7bb000",relationships:{label:{data:[]}},type:"variable"},{attributes:{arguments:{type:"query",values:{language:"flux",query:'import "influxdata/influxdb/v1"\n  \nrepos = v1.measurementTagValues(bucket: v.bucket, measurement: "github_repository", tag: "name")\n\nall = v1.measurementTagValues(bucket: v.bucket, measurement: "github_repository", tag: "name") |> limit(n:1) |> set(key: "_value", value: "*")\n\nunion(tables: [repos, all])  \n  |> sort(columns: ["_value"], desc: false)\n  |> yield(name: "3")'}},name:"repo",selected:null},id:"0432f5323ddeb000",relationships:{label:{data:[]}},type:"variable"}]},labels:[]},e.jmeter={meta:{version:"1",type:"dashboard",name:"JMeter",templateID:"0000000000000010",description:"template created from dashboard: JMeter"},content:{data:{type:"dashboard",attributes:{name:"JMeter",description:"A collection of useful visualizations for monitoring your JMeter using backend listener"},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"047afc562ada5000"},{type:"cell",id:"047afc56381a5000"},{type:"cell",id:"047afc563a9a5000"},{type:"cell",id:"047afc563dda5000"},{type:"cell",id:"047afc56409a5000"},{type:"cell",id:"047afc56439a5000"},{type:"cell",id:"047afc56465a5000"},{type:"cell",id:"047afc56531a5000"},{type:"cell",id:"047afc56555a5000"},{type:"cell",id:"047afc56579a5000"},{type:"cell",id:"047afc5659da5000"}]},variable:{data:[{type:"variable",id:"047afc56915a5000"}]}}},included:[{id:"047afc562ada5000",type:"cell",attributes:{x:6,y:4,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc562ada5000"}}}},{id:"047afc56381a5000",type:"cell",attributes:{x:0,y:7,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc56381a5000"}}}},{id:"047afc563a9a5000",type:"cell",attributes:{x:6,y:7,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc563a9a5000"}}}},{id:"047afc563dda5000",type:"cell",attributes:{x:9,y:7,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc563dda5000"}}}},{id:"047afc56409a5000",type:"cell",attributes:{x:3,y:7,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc56409a5000"}}}},{id:"047afc56439a5000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"047afc56439a5000"}}}},{id:"047afc56465a5000",type:"cell",attributes:{x:0,y:4,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc56465a5000"}}}},{id:"047afc56531a5000",type:"cell",attributes:{x:3,y:4,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc56531a5000"}}}},{id:"047afc56555a5000",type:"cell",attributes:{x:6,y:1,w:6,h:3},relationships:{view:{data:{type:"view",id:"047afc56555a5000"}}}},{id:"047afc56579a5000",type:"cell",attributes:{x:9,y:4,w:3,h:3},relationships:{view:{data:{type:"view",id:"047afc56579a5000"}}}},{id:"047afc5659da5000",type:"cell",attributes:{x:0,y:1,w:6,h:3},relationships:{view:{data:{type:"view",id:"047afc5659da5000"}}}},{type:"view",id:"047afc562ada5000",attributes:{name:"99 and 95 percentile for successful request",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "pct95.0" or r._field == "pct99.0")\n  |> filter(fn: (r) => r.statut == "ok")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"ms",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"2a9b5f3c-9204-4247-afac-c10c05a48a35",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"a1d876d8-0281-4c49-bba0-4483e9b4edbc",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"782ab823-1d7b-41f0-aceb-0115a2a00f59",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"_time",yColumn:"_value",shadeBelow:!1}}},{type:"view",id:"047afc56381a5000",attributes:{name:"Thread/Virtual user count",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "meanAT" or r._field == "maxAT" or r._field == "minAT")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"2a9b5f3c-9204-4247-afac-c10c05a48a35",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"a1d876d8-0281-4c49-bba0-4483e9b4edbc",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"782ab823-1d7b-41f0-aceb-0115a2a00f59",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"_time",yColumn:"_value",shadeBelow:!1}}},{type:"view",id:"047afc563a9a5000",attributes:{name:"Sent bytes",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "sb")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"dfe15c6f-ee6c-414c-83ba-6c6f872a6b4a",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"31187c11-f03e-4d60-8dd0-9fe696d80907",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"3833c29c-24e8-4366-ad2f-990f45463383",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{type:"view",id:"047afc563dda5000",attributes:{name:"Received bytes",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "rb")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"dfe15c6f-ee6c-414c-83ba-6c6f872a6b4a",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"31187c11-f03e-4d60-8dd0-9fe696d80907",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"3833c29c-24e8-4366-ad2f-990f45463383",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{type:"view",id:"047afc56409a5000",attributes:{name:"Number of hits",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "hit")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"dfe15c6f-ee6c-414c-83ba-6c6f872a6b4a",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"31187c11-f03e-4d60-8dd0-9fe696d80907",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"3833c29c-24e8-4366-ad2f-990f45463383",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{type:"view",id:"047afc56439a5000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"    \n    \n#### This Dashboard gives you an overview of some JMeter metrics. Check out [documentation page for configuring JMeter](https://jmeter.apache.org/usermanual/realtime-results.html) if you don't see any data below."}}},{type:"view",id:"047afc56465a5000",attributes:{name:"Max response time",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "max")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"ms",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"dfe15c6f-ee6c-414c-83ba-6c6f872a6b4a",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"31187c11-f03e-4d60-8dd0-9fe696d80907",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"3833c29c-24e8-4366-ad2f-990f45463383",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{type:"view",id:"047afc56531a5000",attributes:{name:"Min response time",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "min")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"ms",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"dfe15c6f-ee6c-414c-83ba-6c6f872a6b4a",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"31187c11-f03e-4d60-8dd0-9fe696d80907",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"3833c29c-24e8-4366-ad2f-990f45463383",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{type:"view",id:"047afc56555a5000",attributes:{name:"Avg response time",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "avg")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"dfe15c6f-ee6c-414c-83ba-6c6f872a6b4a",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"31187c11-f03e-4d60-8dd0-9fe696d80907",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"3833c29c-24e8-4366-ad2f-990f45463383",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{type:"view",id:"047afc56579a5000",attributes:{name:"KO requests count",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "count")\n  |> filter(fn: (r) => r.statut == "ko")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)\n  \n\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"29caa0da-4641-496b-8d4e-af45a5a115a9",type:"scale",hex:"#FD7A5D",name:"Delorean",value:0},{id:"79616477-7865-49f1-9187-19a38344ffb4",type:"scale",hex:"#5F1CF2",name:"Delorean",value:0},{id:"fc9b6344-b885-4e6a-bb3f-6f6f6a7a3bbb",type:"scale",hex:"#4CE09A",name:"Delorean",value:0}],note:"dfsdfsdf",showNoteWhenEmpty:!1,xColumn:"_time",yColumn:"_value",shadeBelow:!1}}},{type:"view",id:"047afc5659da5000",attributes:{name:"OK requests count",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "jmeter")\n  |> filter(fn: (r) => r._field == "count")\n  |> filter(fn: (r) => r.statut == "ok")\n  |> aggregateWindow(every: 10s, fn: mean, createEmpty: true)\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[{id:"2a9b5f3c-9204-4247-afac-c10c05a48a35",type:"scale",hex:"#31C0F6",name:"Nineteen Eighty Four",value:0},{id:"a1d876d8-0281-4c49-bba0-4483e9b4edbc",type:"scale",hex:"#A500A5",name:"Nineteen Eighty Four",value:0},{id:"782ab823-1d7b-41f0-aceb-0115a2a00f59",type:"scale",hex:"#FF7E27",name:"Nineteen Eighty Four",value:0}],note:"",showNoteWhenEmpty:!1,xColumn:"",yColumn:"",shadeBelow:!1}}},{id:"047afc56915a5000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.kubernetes={meta:{version:"1",name:"Kubernetes",templateID:"0000000000000005",description:"template created from dashboard: Kubernetes",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"Kubernetes",description:"A collection of useful visualizations for monitoring your Kubernetes"},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03f8423cc3de0000"},{type:"cell",id:"03f8423cc5de0000"},{type:"cell",id:"03f8423cc95e0000"},{type:"cell",id:"03f8423ccade0000"},{type:"cell",id:"03f8423ccb5e0000"},{type:"cell",id:"03f8423ccc5e0000"},{type:"cell",id:"03f8423ccd1e0000"},{type:"cell",id:"03f8423cce1e0000"},{type:"cell",id:"03f8423cd11e0000"},{type:"cell",id:"03f8423cd21e0000"},{type:"cell",id:"03f8423cd29e0000"},{type:"cell",id:"03f8423cd39e0000"},{type:"cell",id:"03f8423cd45e0000"},{type:"cell",id:"03f8423cd51e0000"},{type:"cell",id:"03f8423cd69e0000"},{type:"cell",id:"03f89d4c68de0000"}]},variable:{data:[{type:"variable",id:"03f454da5512c000"}]}}},included:[{id:"03f8423cc3de0000",type:"cell",attributes:{x:4,y:2,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f8423cc3de0000"}}}},{id:"03f8423cc5de0000",type:"cell",attributes:{x:4,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f8423cc5de0000"}}}},{id:"03f8423cc95e0000",type:"cell",attributes:{x:4,y:3,w:2,h:2},relationships:{view:{data:{type:"view",id:"03f8423cc95e0000"}}}},{id:"03f8423ccade0000",type:"cell",attributes:{x:0,y:5,w:6,h:3},relationships:{view:{data:{type:"view",id:"03f8423ccade0000"}}}},{id:"03f8423ccb5e0000",type:"cell",attributes:{x:6,y:1,w:3,h:4},relationships:{view:{data:{type:"view",id:"03f8423ccb5e0000"}}}},{id:"03f8423ccc5e0000",type:"cell",attributes:{x:2,y:3,w:2,h:2},relationships:{view:{data:{type:"view",id:"03f8423ccc5e0000"}}}},{id:"03f8423ccd1e0000",type:"cell",attributes:{x:0,y:3,w:2,h:2},relationships:{view:{data:{type:"view",id:"03f8423ccd1e0000"}}}},{id:"03f8423cce1e0000",type:"cell",attributes:{x:2,y:8,w:2,h:4},relationships:{view:{data:{type:"view",id:"03f8423cce1e0000"}}}},{id:"03f8423cd11e0000",type:"cell",attributes:{x:0,y:8,w:2,h:4},relationships:{view:{data:{type:"view",id:"03f8423cd11e0000"}}}},{id:"03f8423cd21e0000",type:"cell",attributes:{x:3,y:1,w:1,h:2},relationships:{view:{data:{type:"view",id:"03f8423cd21e0000"}}}},{id:"03f8423cd29e0000",type:"cell",attributes:{x:0,y:1,w:2,h:2},relationships:{view:{data:{type:"view",id:"03f8423cd29e0000"}}}},{id:"03f8423cd39e0000",type:"cell",attributes:{x:2,y:1,w:1,h:2},relationships:{view:{data:{type:"view",id:"03f8423cd39e0000"}}}},{id:"03f8423cd45e0000",type:"cell",attributes:{x:6,y:5,w:6,h:3},relationships:{view:{data:{type:"view",id:"03f8423cd45e0000"}}}},{id:"03f8423cd51e0000",type:"cell",attributes:{x:9,y:1,w:3,h:4},relationships:{view:{data:{type:"view",id:"03f8423cd51e0000"}}}},{id:"03f8423cd69e0000",type:"cell",attributes:{x:4,y:8,w:8,h:4},relationships:{view:{data:{type:"view",id:"03f8423cd69e0000"}}}},{id:"03f89d4c68de0000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03f89d4c68de0000"}}}},{type:"view",id:"03f8423cc3de0000",attributes:{name:"K8s Node Allocatable CPUs",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_node")\n  |> filter(fn: (r) => r._field == "allocatable_cpu_cores")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cc5de0000",attributes:{name:"K8s Node Capacity CPUs",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_node")\n  |> filter(fn: (r) => r._field == "capacity_cpu_cores")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cc95e0000",attributes:{name:"Allocatable Pods",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_node")\n  |> filter(fn: (r) => r._field == "allocatable_pods")\n\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423ccade0000",attributes:{name:"Resource memory",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_pod_container")\n  |> filter(fn: (r) => r._field == "resource_requests_memory_bytes")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423ccb5e0000",attributes:{name:"Resource Requests CPU",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_pod_container")\n  |> filter(fn: (r) => r._field == "resource_requests_millicpu_units")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")\n\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423ccc5e0000",attributes:{name:"Capacity Pods",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_node")\n\n  |> filter(fn: (r) => r._field == "allocatable_pods")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423ccd1e0000",attributes:{name:"DaemonSet",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_daemonset")\n  |> filter(fn: (r) => r._field == "number_ready" or r._field == "number_available" or r._field == "number_unavailable" or r._field == "updated_number_scheduled" or r._field == "number_misscheduled")\n  |> group(columns: ["daemonset_name","_field"])\n  \n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cce1e0000",attributes:{name:"Persistent volumes status",properties:{shape:"chronograf-v2",type:"table",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_persistentvolume")\n\n  |> filter(fn: (r) => r._field == "phase_type")\n  |> group(columns: ["host", "_measurement", "pv_name", "phase" ,"node_name"], mode:"by")\n  |> last()\n  |> keep(columns: ["pv_name", "phase"])',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],tableOptions:{verticalTimeAxis:!0,sortBy:{internalName:"",displayName:"",visible:!1},wrapping:"",fixFirstColumn:!1},fieldOptions:[{internalName:"",displayName:"",visible:!0},{internalName:"result",displayName:"result",visible:!0},{internalName:"table",displayName:"table",visible:!0},{internalName:"phase",displayName:"phase",visible:!0},{internalName:"pv_name",displayName:"pv_name",visible:!0}],timeFormat:"YYYY-MM-DD HH:mm:ss",decimalPlaces:{isEnforced:!1,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd11e0000",attributes:{name:"Replicas available",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_deployment")\n  |> filter(fn: (r) => r._field == "replicas_available")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd21e0000",attributes:{name:"Running Containers",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_pod_container")\n  |> filter(fn: (r) => r._field == "state_code")\n  |> last()\n  |> keep(columns: ["_time", "_value","state"])\n  \n//  |> drop(columns: ["container_name",""])\n\n//  |> count()\n//  |> filter(fn: (r) => r.namespace == "default")\n//  |> drop(columns: ["_start","_stop","_field","host","container_name","_time","table","namespace","pod_name"])\n   |> count()',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd29e0000",attributes:{name:"Allocatable memory",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_node")\n  |> filter(fn: (r) => r._field == "allocatable_memory_bytes")\n  |> last()\n  |> map(fn: (r) => ({r with _value: r._value / 1000000000}))\n  |> yield(name: "last")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" GB",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd39e0000",attributes:{name:"Running Pods",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_pod_container")\n  |> filter(fn: (r) => r._field == "state_code")\n  |> filter(fn: (r) => r.state == "running") \n  |> drop(columns: ["container_name"])\n  |> distinct(column: "pod_name")\n  |> group(columns:["state","pod_name","_value", "namespace"], mode: "except")\n  |> count()',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd45e0000",attributes:{name:"Node memory",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_node")\n  |> filter(fn: (r) => r._field == "capacity_memory_bytes" or r._field == "allocatable_memory_bytes")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd51e0000",attributes:{name:"Resource limit milliscpu",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_pod_container" and  r._field == "resource_limits_millicpu_units")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f8423cd69e0000",attributes:{name:"Running Containers",properties:{shape:"chronograf-v2",type:"table",queries:[{text:'\n\nfrom(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "kubernetes_pod_container")\n  |> filter(fn: (r) => r._field == "state_code")\n  |> group(columns:["pod_name","container_name"])\n  |> last()\n  |> group(columns: ["host"])\n  |> keep(columns:["namespace","container_name","pod_name", "state"])\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],tableOptions:{verticalTimeAxis:!0,sortBy:{internalName:"",displayName:"",visible:!1},wrapping:"",fixFirstColumn:!1},fieldOptions:[{internalName:"",displayName:"",visible:!0},{internalName:"result",displayName:"result",visible:!0},{internalName:"table",displayName:"table",visible:!0},{internalName:"container_name",displayName:"container_name",visible:!0},{internalName:"namespace",displayName:"namespace",visible:!0},{internalName:"pod_name",displayName:"pod_name",visible:!0},{internalName:"state",displayName:"state",visible:!0}],timeFormat:"YYYY-MM-DD HH:mm:ss",decimalPlaces:{isEnforced:!1,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f89d4c68de0000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"This dashboard gives you an overview of [Kubernates](https://kubernetes.io) metrics. See the [Telegraf Documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/kube_inventory) for help configuring these plugins."}}},{id:"03f454da5512c000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.nginx={meta:{version:"1",name:"Nginx",templateID:"0000000000000006",description:"template created from dashboard: Nginx",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"Nginx",description:"A collection of useful visualizations for monitoring your Nginx"},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03f4ba64d992c000"},{type:"cell",id:"03f4ba64db12c000"},{type:"cell",id:"03f4ba64dc52c000"},{type:"cell",id:"03f4ba64dd92c000"},{type:"cell",id:"03f4ba64e012c000"},{type:"cell",id:"03f4ba64e152c000"},{type:"cell",id:"03f4ba64e1d2c000"},{type:"cell",id:"03f4ba64e2d2c000"},{type:"cell",id:"03f4ba64e392c000"},{type:"cell",id:"03f4ba64e492c000"},{type:"cell",id:"03f4ba64e792c000"},{type:"cell",id:"03f4bafe2592c000"},{type:"cell",id:"03f4beb32ad2c000"},{type:"cell",id:"03f5ac5c6492c000"}]},variable:{data:[{type:"variable",id:"03f454da5512c000"}]}}},included:[{id:"03f4ba64d992c000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03f4ba64d992c000"}}}},{id:"03f4ba64db12c000",type:"cell",attributes:{x:0,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4ba64db12c000"}}}},{id:"03f4ba64dc52c000",type:"cell",attributes:{x:7,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f4ba64dc52c000"}}}},{id:"03f4ba64dd92c000",type:"cell",attributes:{x:3,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4ba64dd92c000"}}}},{id:"03f4ba64e012c000",type:"cell",attributes:{x:0,y:1,w:3,h:1},relationships:{view:{data:{type:"view",id:"03f4ba64e012c000"}}}},{id:"03f4ba64e152c000",type:"cell",attributes:{x:9,y:3,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f4ba64e152c000"}}}},{id:"03f4ba64e1d2c000",type:"cell",attributes:{x:6,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4ba64e1d2c000"}}}},{id:"03f4ba64e2d2c000",type:"cell",attributes:{x:9,y:1,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f4ba64e2d2c000"}}}},{id:"03f4ba64e392c000",type:"cell",attributes:{x:3,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f4ba64e392c000"}}}},{id:"03f4ba64e492c000",type:"cell",attributes:{x:5,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f4ba64e492c000"}}}},{id:"03f4ba64e792c000",type:"cell",attributes:{x:3,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4ba64e792c000"}}}},{id:"03f4bafe2592c000",type:"cell",attributes:{x:6,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4bafe2592c000"}}}},{id:"03f4beb32ad2c000",type:"cell",attributes:{x:9,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f4beb32ad2c000"}}}},{id:"03f5ac5c6492c000",type:"cell",attributes:{x:0,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f5ac5c6492c000"}}}},{type:"view",id:"03f4ba64d992c000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"This dashboard gives you an overview of [Nginx](https://nginx.com) metrics. See the [Telegraf Documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/nginx) for help configuring these plugins."}}},{type:"view",id:"03f4ba64db12c000",attributes:{name:"Disk Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "disk")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64dc52c000",attributes:{name:"Total Memory",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "total")\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1024.0 / 1024.0 / 1024.0}))\n  |> yield(name: "last")\n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" GB",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64dd92c000",attributes:{name:"CPU Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user" or r._field == "usage_system" or r._field == "usage_idle")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e012c000",attributes:{name:"System Uptime",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "uptime")\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 86400.0}))\n  |> yield(name: "last")\n\n ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" days",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!1,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e152c000",attributes:{name:"Swap",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "swap")\n  |> filter(fn: (r) => r._field == "total" or r._field == "used")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e1d2c000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Load",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e2d2c000",attributes:{name:"Memory Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0},{id:"c2f922df-60a1-4471-91fc-c16427e7fcfb",type:"scale",hex:"#8F8AF4",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"330f7fee-d44e-4a15-b2d6-2330178ec203",type:"scale",hex:"#A51414",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"e3c73eb3-665a-414b-afdd-1686c9b962d9",type:"scale",hex:"#F4CF31",name:"Do Androids Dream of Electric Sheep?",value:0}],prefix:"",suffix:"%",decimalPlaces:{isEnforced:!0,digits:1},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e392c000",attributes:{name:"nCPUs",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "n_cpus")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" cpus",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e492c000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4ba64e792c000",attributes:{name:"Nginx reading: writing/waiting",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket:v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "nginx")\n  |> filter(fn: (r) => r._field == "writing" or r._field == "waiting")\n |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4bafe2592c000",attributes:{name:"Nginx requests & connections / min",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket:v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "nginx")\n  |> filter(fn: (r) => r._field == "accepts" or r._field == "handled" or r._field=="requests")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> derivative(unit: 1m, nonNegative: false)\n  |> yield(name: "derivative")\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f4beb32ad2c000",attributes:{name:"Network",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "net")\n  |> filter(fn: (r) => r._field == "bytes_recv" or r._field == "bytes_sent")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> derivative(unit: 1s, nonNegative: false)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5ac5c6492c000",attributes:{name:"Nginx active connections",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket:v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "nginx")\n  |> filter(fn: (r) => r._field == "active")\n |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],prefix:"",suffix:"",decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{id:"03f454da5512c000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.ossMetrics={meta:{version:"1",name:"InfluxDB 2.0 OSS Metrics",templateID:"0000000000000007",description:"template created from dashboard: Local Metrics",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"InfluxDB 2.0 OSS Metrics",description:"A collection of useful visualizations for monitoring your local InfluxDB 2.0 OSS instance."},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03d3ab2c7ed06000"},{type:"cell",id:"03d3ab2c80d06000"},{type:"cell",id:"03d3ab2c83906000"},{type:"cell",id:"03d3ab2c85d06000"},{type:"cell",id:"03d3ab2c88506000"},{type:"cell",id:"03d3ab2c8a906000"},{type:"cell",id:"03d3ab2c9b506000"},{type:"cell",id:"03d3ab2c9d106000"},{type:"cell",id:"03d3ab2c9f106000"},{type:"cell",id:"03d3ab2ca1106000"},{type:"cell",id:"03d3ab2ca2d06000"},{type:"cell",id:"03d3ab2ca4906000"},{type:"cell",id:"03d3ab2cadd06000"},{type:"cell",id:"03d3ab2cb0906000"},{type:"cell",id:"03d3ab2cb3106000"},{type:"cell",id:"03d3ab2cb5906000"}]},variable:{data:[{type:"variable",id:"03d39fa6bd106000"}]}}},included:[{id:"03d3ab2c7ed06000",type:"cell",attributes:{x:0,y:5,w:12,h:4},relationships:{view:{data:{type:"view",id:"03d3ab2c7ed06000"}}}},{id:"03d3ab2c80d06000",type:"cell",attributes:{x:0,y:9,w:12,h:4},relationships:{view:{data:{type:"view",id:"03d3ab2c80d06000"}}}},{id:"03d3ab2c83906000",type:"cell",attributes:{x:6,y:3,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c83906000"}}}},{id:"03d3ab2c85d06000",type:"cell",attributes:{x:0,y:4,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c85d06000"}}}},{id:"03d3ab2c88506000",type:"cell",attributes:{x:3,y:4,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c88506000"}}}},{id:"03d3ab2c8a906000",type:"cell",attributes:{x:0,y:3,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c8a906000"}}}},{id:"03d3ab2c9b506000",type:"cell",attributes:{x:6,y:4,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c9b506000"}}}},{id:"03d3ab2c9d106000",type:"cell",attributes:{x:9,y:3,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c9d106000"}}}},{id:"03d3ab2c9f106000",type:"cell",attributes:{x:3,y:3,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2c9f106000"}}}},{id:"03d3ab2ca1106000",type:"cell",attributes:{x:9,y:4,w:3,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2ca1106000"}}}},{id:"03d3ab2ca2d06000",type:"cell",attributes:{x:0,y:1,w:3,h:2},relationships:{view:{data:{type:"view",id:"03d3ab2ca2d06000"}}}},{id:"03d3ab2ca4906000",type:"cell",attributes:{x:3,y:1,w:9,h:2},relationships:{view:{data:{type:"view",id:"03d3ab2ca4906000"}}}},{id:"03d3ab2cadd06000",type:"cell",attributes:{x:0,y:13,w:4,h:3},relationships:{view:{data:{type:"view",id:"03d3ab2cadd06000"}}}},{id:"03d3ab2cb0906000",type:"cell",attributes:{x:4,y:13,w:4,h:3},relationships:{view:{data:{type:"view",id:"03d3ab2cb0906000"}}}},{id:"03d3ab2cb3106000",type:"cell",attributes:{x:8,y:13,w:4,h:3},relationships:{view:{data:{type:"view",id:"03d3ab2cb3106000"}}}},{id:"03d3ab2cb5906000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03d3ab2cb5906000"}}}},{type:"view",id:"03d3ab2c7ed06000",attributes:{name:"Local Object Store IO",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "boltdb_reads_total" or r._measurement == "boltdb_writes_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> derivative(unit: v.windowPeriod, nonNegative: true)\n  |> drop(columns: ["_field"])\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c80d06000",attributes:{name:"Query Requests",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "http_api_requests_total")\n  |> filter(fn: (r) => r.path == "/api/v2/query")\n  |> filter(fn: (r) => r._field == "counter")\n  |> derivative(unit: v.windowPeriod, nonNegative: true)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c83906000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_buckets_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Buckets",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"A Bucket is where you store your time series data and each one has a set retention policy. You created one when you first set your instance up, but you can create new ones from the Settings menu. You can learn more about Buckets in our [documentation](https://v2.docs.influxdata.com/v2.0/organizations/buckets/). Why not create a new one right now?",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c85d06000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_telegrafs_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Telegrafs",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"InfluxDB 2 can create and store your Telegraf agent configs. Telegraf is the world's best data collection agent and is one of the easiest ways to send data into InfluxDB. You can create new configurations in the Settings menu. You can learn more about Telegraf in our [documentation](https://v2.docs.influxdata.com/v2.0/collect-data/use-telegraf/).",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c88506000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_dashboards_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Dashboards",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"Dashboards are a great way to group together and view data in InfluxDB 2. You can create new ones from the Dashboards page in the navigation menu. For more information on managing Dashboards, check out our [documentation](https://v2.docs.influxdata.com/v2.0/visualize-data/dashboards/).",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c8a906000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_organizations_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Orgs",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"An Organization is a workspace where you and your team can organize your data, Dashboards, Tasks, and anything else you create. You can quickly switch between or create a new one from the first icon in the navigation bar. You can read more about Organizations in our [documentation](https://v2.docs.influxdata.com/v2.0/organizations/).",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c9b506000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_scrapers_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Scrapers",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"InfluxDB 2 can natively scrape data from Prometheus endpoints, including its own metrics. For more information on setting them up, check out our [documentation](https://v2.docs.influxdata.com/v2.0/collect-data/scrape-data/).",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c9d106000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_tokens_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Tokens",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"A Token allows you to access your instance from an external client such as a command line or a client library. They are also used to limit the scope of automated actions like Tasks. You can manage them in the Setting menu. You can learn more about Tokens in our [documentation](https://v2.docs.influxdata.com/v2.0/security/tokens/). Keep your Tokens safe!",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2c9f106000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_users_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Users",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"This lets you know how many users have access to your InfluxDB 2 instance. You can add new users from the Settings menu. You can learn more about Users in our [documentation](https://v2.docs.influxdata.com/v2.0/users/).",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2ca1106000",attributes:{name:"",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "task_scheduler_total_runs_active")\n  |> filter(fn: (r) => r._field == "gauge")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" Tasks",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"Tasks allow you to automate Flux queries for things like data rollups and enrichment. You can create a new one from the Tasks button in the navigation menu. For more information about Tasks, check out our [documentation](https://v2.docs.influxdata.com/v2.0/process-data/).",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2ca2d06000",attributes:{name:"Uptime",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_uptime_seconds")\n  |> filter(fn: (r) => r._field == "gauge")\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 60.0 / 60.0})) ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" hrs",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"This shows the amount of time your current InfluxDB 2 instance has been running, in hours. Keep it up!",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2ca4906000",attributes:{name:"Instance Info",properties:{shape:"chronograf-v2",type:"table",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "influxdb_info")\n  |> last()\n  |> drop(columns: ["_start", "_stop","_time","_field","_value","_measurement"])\n  |> rename(columns: {arch: "Architecture", build_date: "Build Date", commit: "Github Commit", cpus: "CPUs", os: "OS", version: "Version"})\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],tableOptions:{verticalTimeAxis:!0,sortBy:{internalName:"",displayName:"",visible:!1},wrapping:"",fixFirstColumn:!1},fieldOptions:[{internalName:"",displayName:"",visible:!0},{internalName:"result",displayName:"result",visible:!0},{internalName:"table",displayName:"table",visible:!0},{internalName:"Architecture",displayName:"Architecture",visible:!0},{internalName:"Build Date",displayName:"Build Date",visible:!0},{internalName:"Github Commit",displayName:"Github Commit",visible:!0},{internalName:"CPUs",displayName:"CPUs",visible:!0},{internalName:"OS",displayName:"OS",visible:!0},{internalName:"Version",displayName:"Version",visible:!0}],timeFormat:"YYYY-MM-DD HH:mm:ss",decimalPlaces:{isEnforced:!1,digits:2},note:"This cell gives you information about your running instance of InfluxDB 2, but you probably already knew that.",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2cadd06000",attributes:{name:"Memory Allocations (Bytes)",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "go_memstats_alloc_bytes_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> derivative(unit: v.windowPeriod, nonNegative: true)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2cb0906000",attributes:{name:"Memory Usage (%)",properties:{shape:"chronograf-v2",queries:[{text:'bytes_used = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "go_memstats_alloc_bytes")\n  |> filter(fn: (r) => r._field == "gauge")\n  |> drop(columns: ["_start", "_stop"])\n  \ntotal_bytes = from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "go_memstats_sys_bytes")\n  |> filter(fn: (r) => r._field == "gauge")\n  |> drop(columns: ["_start", "_stop"])\n\njoin(tables: {key1: bytes_used, key2: total_bytes}, on: ["_time", "_field"], method: "inner")\n  |> map(fn: (r) => ({\n    _time: r._time,\n    _value: (float(v: r._value_key1) / float(v: r._value_key2)) * 100.0,\n    _field: "Memory Usage Percent"\n  }))\n  |> yield(name: "percentage")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2cb3106000",attributes:{name:"Memory Allocs & Frees (Bytes)",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "go_memstats_mallocs_total" or r._measurement == "go_memstats_frees_total")\n  |> filter(fn: (r) => r._field == "counter")\n  |> derivative(unit: v.windowPeriod, nonNegative: false)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03d3ab2cb5906000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"#### This Dashboard gives you an overview of some of the metrics that are available from the Local Metrics endpoint located at `/metrics`. Check out our [documentation page for configuring Scrapers](https://v2.docs.influxdata.com/v2.0/collect-data/scrape-data/manage-scrapers/create-a-scraper/) if you don't see any data below."}}},{id:"03d39fa6bd106000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.redis={meta:{version:"1",name:"Redis",templateID:"0000000000000008",description:"template created from dashboard: Redis",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"Redis",description:"A collection of useful visualizations for monitoring your Redis"},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03f5d41e70d2c000"},{type:"cell",id:"03f5d41e7352c000"},{type:"cell",id:"03f5d41e77d2c000"},{type:"cell",id:"03f5d41e7892c000"},{type:"cell",id:"03f5d41e7952c000"},{type:"cell",id:"03f5d41e7a52c000"},{type:"cell",id:"03f5d41e7b12c000"},{type:"cell",id:"03f5d41e7bd2c000"},{type:"cell",id:"03f5d41e7f12c000"},{type:"cell",id:"03f5d41e8092c000"},{type:"cell",id:"03f5d4de1fd2c000"},{type:"cell",id:"03f5d6738e52c000"},{type:"cell",id:"03f5d76be1d2c000"},{type:"cell",id:"03f5d7deb092c000"},{type:"cell",id:"03f5d8774492c000"},{type:"cell",id:"03f5d9b21152c000"},{type:"cell",id:"03f5e1493752c000"},{type:"cell",id:"03f5e1c36812c000"},{type:"cell",id:"03f5e7c83212c000"}]},variable:{data:[{type:"variable",id:"03f454da5512c000"}]}}},included:[{id:"03f5d41e70d2c000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03f5d41e70d2c000"}}}},{id:"03f5d41e7352c000",type:"cell",attributes:{x:0,y:1,w:3,h:1},relationships:{view:{data:{type:"view",id:"03f5d41e7352c000"}}}},{id:"03f5d41e77d2c000",type:"cell",attributes:{x:6,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f5d41e77d2c000"}}}},{id:"03f5d41e7892c000",type:"cell",attributes:{x:3,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f5d41e7892c000"}}}},{id:"03f5d41e7952c000",type:"cell",attributes:{x:9,y:1,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f5d41e7952c000"}}}},{id:"03f5d41e7a52c000",type:"cell",attributes:{x:0,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03f5d41e7a52c000"}}}},{id:"03f5d41e7b12c000",type:"cell",attributes:{x:7,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f5d41e7b12c000"}}}},{id:"03f5d41e7bd2c000",type:"cell",attributes:{x:9,y:3,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f5d41e7bd2c000"}}}},{id:"03f5d41e7f12c000",type:"cell",attributes:{x:3,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f5d41e7f12c000"}}}},{id:"03f5d41e8092c000",type:"cell",attributes:{x:5,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03f5d41e8092c000"}}}},{id:"03f5d4de1fd2c000",type:"cell",attributes:{x:0,y:5,w:4,h:4},relationships:{view:{data:{type:"view",id:"03f5d4de1fd2c000"}}}},{id:"03f5d6738e52c000",type:"cell",attributes:{x:9,y:9,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f5d6738e52c000"}}}},{id:"03f5d76be1d2c000",type:"cell",attributes:{x:0,y:9,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f5d76be1d2c000"}}}},{id:"03f5d7deb092c000",type:"cell",attributes:{x:3,y:9,w:3,h:4},relationships:{view:{data:{type:"view",id:"03f5d7deb092c000"}}}},{id:"03f5d8774492c000",type:"cell",attributes:{x:0,y:11,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f5d8774492c000"}}}},{id:"03f5d9b21152c000",type:"cell",attributes:{x:4,y:5,w:4,h:4},relationships:{view:{data:{type:"view",id:"03f5d9b21152c000"}}}},{id:"03f5e1493752c000",type:"cell",attributes:{x:8,y:5,w:4,h:4},relationships:{view:{data:{type:"view",id:"03f5e1493752c000"}}}},{id:"03f5e1c36812c000",type:"cell",attributes:{x:6,y:9,w:3,h:4},relationships:{view:{data:{type:"view",id:"03f5e1c36812c000"}}}},{id:"03f5e7c83212c000",type:"cell",attributes:{x:9,y:11,w:3,h:2},relationships:{view:{data:{type:"view",id:"03f5e7c83212c000"}}}},{type:"view",id:"03f5d41e70d2c000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"This dashboard gives you an overview of [Nginx](https://nginx.com) metrics. See the [Telegraf Documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/nginx) for help configuring these plugins."}}},{type:"view",id:"03f5d41e7352c000",attributes:{name:"System Uptime",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "uptime")\n  |> last()\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 86400.0}))\n  |> yield(name: "last")\n  \n  \n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" days",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!1,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e77d2c000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Load",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e7892c000",attributes:{name:"CPU Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user" or r._field == "usage_system" or r._field == "usage_idle")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e7952c000",attributes:{name:"Memory Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> group(columns: ["_value", "_time", "_start", "_stop"], mode: "except")\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0},{id:"c2f922df-60a1-4471-91fc-c16427e7fcfb",type:"scale",hex:"#8F8AF4",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"330f7fee-d44e-4a15-b2d6-2330178ec203",type:"scale",hex:"#A51414",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"e3c73eb3-665a-414b-afdd-1686c9b962d9",type:"scale",hex:"#F4CF31",name:"Do Androids Dream of Electric Sheep?",value:0}],prefix:"",suffix:"%",decimalPlaces:{isEnforced:!0,digits:1},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e7a52c000",attributes:{name:"Disk Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "disk")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e7b12c000",attributes:{name:"Total Memory",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "total")\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1024.0 / 1024.0 / 1024.0}))\n  |> yield(name: "last")\n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" GB",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e7bd2c000",attributes:{name:"Swap",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "swap")\n  |> filter(fn: (r) => r._field == "total" or r._field == "used")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e7f12c000",attributes:{name:"nCPUs",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "n_cpus")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" cpus",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d41e8092c000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d4de1fd2c000",attributes:{name:"Redis used memory",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "used_memory" or r._field == "used_memory_dataset" or r._field == "used_memory_rss" or r._field == "used_memory_lua")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d6738e52c000",attributes:{name:"Redis connections",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "total_connections_received" or r._field == "rejected_connections")\n  |> derivative(unit: v.windowPeriod, nonNegative: false)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],prefix:"",suffix:"",decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d76be1d2c000",attributes:{name:"Redis eviced/expired keys",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "evicted_keys" or r._field == "expired_keys")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d7deb092c000",attributes:{name:"Keyspace hitrate",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "keyspace_hitrate")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d8774492c000",attributes:{name:"Redis connected slaves",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "connected_slaves")\n  |> aggregateWindow(every: v.windowPeriod, fn: min)\n  |> min()\n  |> yield(name: "min")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],prefix:"",suffix:"",decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5d9b21152c000",attributes:{name:"Redis CPU",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "used_cpu_user" or r._field == "used_cpu_sys" or r._field == "used_cpu_sys_children" or r._field == "used_cpu_user_children")\n  |> derivative(unit: v.windowPeriod, nonNegative: true)\n  |> yield(name: "nonnegative derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5e1493752c000",attributes:{name:"Redis # commands processed per sec",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "instantaneous_ops_per_sec")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5e1c36812c000",attributes:{name:"Redis - Network Input/Output",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "total_net_output_bytes" or r._field == "total_net_input_bytes")\n  |> derivative(unit: v.windowPeriod, nonNegative: false)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03f5e7c83212c000",attributes:{name:"Redis uptime",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r._measurement == "redis")\n  |> filter(fn: (r) => r._field == "uptime")\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 86400.0}))\n  |> yield(name: "last")\n  \n',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[],aggregateWindow:{period:"auto"}}}],prefix:"",suffix:" days",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{id:"03f454da5512c000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},e.system={meta:{version:"1",name:"System",templateID:"0000000000000009",description:"template created from dashboard: System",type:"dashboard"},content:{data:{type:"dashboard",attributes:{name:"System",description:"A collection of useful visualizations for monitoring your system stats"},relationships:{label:{data:[]},cell:{data:[{type:"cell",id:"03cbc03746311000"},{type:"cell",id:"03cbc03747c20000"},{type:"cell",id:"03cbc03748e4e000"},{type:"cell",id:"03cbc0374aecd000"},{type:"cell",id:"03cbc0374aa72000"},{type:"cell",id:"03cbc0375b098000"},{type:"cell",id:"03cbc0375bde6000"},{type:"cell",id:"03cbc0375e7a6000"},{type:"cell",id:"03cbc03760d31000"},{type:"cell",id:"03cbc03760620000"},{type:"cell",id:"03cbc0376119f000"},{type:"cell",id:"03cbc03763339000"},{type:"cell",id:"03cbc03765959000"}]},variable:{data:[{type:"variable",id:"03cbc037bafa6000"}]}}},included:[{id:"03cbc03746311000",type:"cell",attributes:{x:0,y:0,w:12,h:1},relationships:{view:{data:{type:"view",id:"03cbc03746311000"}}}},{id:"03cbc03747c20000",type:"cell",attributes:{x:0,y:1,w:3,h:1},relationships:{view:{data:{type:"view",id:"03cbc03747c20000"}}}},{id:"03cbc03748e4e000",type:"cell",attributes:{x:3,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03cbc03748e4e000"}}}},{id:"03cbc0374aecd000",type:"cell",attributes:{x:5,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03cbc0374aecd000"}}}},{id:"03cbc0374aa72000",type:"cell",attributes:{x:7,y:1,w:2,h:1},relationships:{view:{data:{type:"view",id:"03cbc0374aa72000"}}}},{id:"03cbc0375b098000",type:"cell",attributes:{x:0,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc0375b098000"}}}},{id:"03cbc0375bde6000",type:"cell",attributes:{x:6,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc0375bde6000"}}}},{id:"03cbc0375e7a6000",type:"cell",attributes:{x:9,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc0375e7a6000"}}}},{id:"03cbc03760d31000",type:"cell",attributes:{x:3,y:2,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc03760d31000"}}}},{id:"03cbc03760620000",type:"cell",attributes:{x:6,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc03760620000"}}}},{id:"03cbc0376119f000",type:"cell",attributes:{x:9,y:1,w:3,h:4},relationships:{view:{data:{type:"view",id:"03cbc0376119f000"}}}},{id:"03cbc03763339000",type:"cell",attributes:{x:3,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc03763339000"}}}},{id:"03cbc03765959000",type:"cell",attributes:{x:0,y:5,w:3,h:3},relationships:{view:{data:{type:"view",id:"03cbc03765959000"}}}},{type:"view",id:"03cbc03746311000",attributes:{name:"Name this Cell",properties:{shape:"chronograf-v2",type:"markdown",note:"This dashboard gives you an overview of System metrics with metrics from `system`, `mem`, `diskio`, `swap` and `net` measurements. See the [Telegraf Documentation](https://github.com/influxdata/telegraf/tree/master/plugins/inputs/system) for help configuring these plugins."}}},{type:"view",id:"03cbc03747c20000",attributes:{name:"System Uptime",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "uptime")\n   |> last()\n   |> map(fn: (r) => ({r with _value: r._value / 86400}))\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" days",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!1,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc03748e4e000",attributes:{name:"nCPUs",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "n_cpus")\n  |> last()\n  |> yield(name: "last")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" cpus",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc0374aecd000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1")\n |> last()\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:"",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc0374aa72000",attributes:{name:"Total Memory",properties:{shape:"chronograf-v2",type:"single-stat",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "total")\n  |> last()\n  |> map(fn: (r) => ({r with _value: float(v: r._value) / 1024.0 / 1024.0 / 1024.0}))\n  |> yield(name: "last")\n  ',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],prefix:"",suffix:" GB",colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0}],decimalPlaces:{isEnforced:!0,digits:2},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc0375b098000",attributes:{name:"Disk Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "disk")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc0375bde6000",attributes:{name:"System Load",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "system")\n  |> filter(fn: (r) => r._field == "load1" or r._field == "load5" or r._field == "load15")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Load",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc0375e7a6000",attributes:{name:"Swap",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "swap")\n  |> filter(fn: (r) => r._field == "total" or r._field == "used")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc03760d31000",attributes:{name:"CPU Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "cpu")\n  |> filter(fn: (r) => r._field == "usage_user" or r._field == "usage_system" or r._field == "usage_idle")\n  |> filter(fn: (r) => r.cpu == "cpu-total")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc03760620000",attributes:{name:"Processes",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "processes")\n  |> filter(fn: (r) => r._field == "running" or r._field == "blocked" or r._field == "idle" or r._field == "unknown")\n  |> aggregateWindow(every: v.windowPeriod, fn: max)\n  |> yield(name: "max")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc0376119f000",attributes:{name:"Memory Usage",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "mem")\n  |> filter(fn: (r) => r._field == "used_percent")\n  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\n  |> yield(name: "mean")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"",prefix:"",suffix:"%",base:"10",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"line-plus-single-stat",legend:{},colors:[{id:"base",type:"text",hex:"#00C9FF",name:"laser",value:0},{id:"c2f922df-60a1-4471-91fc-c16427e7fcfb",type:"scale",hex:"#8F8AF4",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"330f7fee-d44e-4a15-b2d6-2330178ec203",type:"scale",hex:"#A51414",name:"Do Androids Dream of Electric Sheep?",value:0},{id:"e3c73eb3-665a-414b-afdd-1686c9b962d9",type:"scale",hex:"#F4CF31",name:"Do Androids Dream of Electric Sheep?",value:0}],prefix:"",suffix:"%",decimalPlaces:{isEnforced:!0,digits:1},note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc03763339000",attributes:{name:"Network",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "net")\n  |> filter(fn: (r) => r._field == "bytes_recv" or r._field == "bytes_sent")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> derivative(unit: 1s, nonNegative: false)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Bytes",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{type:"view",id:"03cbc03765959000",attributes:{name:"Disk IO",properties:{shape:"chronograf-v2",queries:[{text:'from(bucket: v.bucket)\n  |> range(start: v.timeRangeStart)\n  |> filter(fn: (r) => r._measurement == "diskio")\n  |> filter(fn: (r) => r._field == "read_bytes" or r._field == "write_bytes")\n  |> aggregateWindow(every: v.windowPeriod, fn: last, createEmpty: false)\n  |> derivative(unit: 1s, nonNegative: false)\n  |> yield(name: "derivative")',editMode:"advanced",name:"",builderConfig:{buckets:[],tags:[{key:"_measurement",values:[]}],functions:[]}}],axes:{x:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"},y:{bounds:["",""],label:"Bytes",prefix:"",suffix:"",base:"2",scale:"linear"},y2:{bounds:["",""],label:"",prefix:"",suffix:"",base:"10",scale:"linear"}},type:"xy",legend:{},geom:"line",colors:[],note:"",showNoteWhenEmpty:!1}}},{id:"03cbc037bafa6000",type:"variable",attributes:{name:"bucket",arguments:{type:"query",values:{query:'buckets()\n  |> filter(fn: (r) => r.name !~ /^_/)\n  |> rename(columns: {name: "_value"})\n  |> keep(columns: ["_value"])\n',language:"flux"}},selected:null},relationships:{label:{data:[]}}}]},labels:[]},Object.defineProperty(e,"__esModule",{value:!0})}(t)}}]);
//# sourceMappingURL=14.b5134f1a61.js.map