(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{152:function(e,n,t){"use strict";var a=t(2),o=t(6);n.a=class extends a.PureComponent{render(){const{children:e}=this.props;return o.f?null:e}}},2508:function(e,n,t){"use strict";t.r(n),t.d(n,"WriteDataSearchContext",(function(){return y}));var a=t(2),o=t.n(a),i=t(3);var l=()=>{const{searchTerm:e,setSearchTerm:n}=Object(a.useContext)(y);return o.a.createElement(i.Input,{placeholder:"Search data writing methods...",value:e,size:i.ComponentSize.Large,icon:i.IconFont.Search,onChange:e=>{n(e.target.value)},autoFocus:!0,testID:"write-data--search"})},r=t(855),s=t(852),c=t(216),d=t(203),m=t(742);var u=()=>{const{searchTerm:e}=Object(a.useContext)(y),n=Object(r.b)(e);return n.length?o.a.createElement("div",{className:"write-data--section","data-testid":"write-data--section file-upload"},o.a.createElement(i.Heading,{element:i.HeadingElement.H2,weight:i.FontWeight.Regular,style:{marginTop:"24px",marginBottom:"4px"}},"File Upload"),o.a.createElement(i.Heading,{element:i.HeadingElement.H5,weight:i.FontWeight.Regular,style:{marginBottom:"12px"}},"Upload line protocol or Annotated CSVs with the click of a button"),o.a.createElement(i.SquareGrid,{cardSize:"170px",gutter:i.ComponentSize.Small},n.map(e=>o.a.createElement(m.a,{key:e.id,id:e.id,name:e.name,image:e.image,url:`${d.h}/${e.id}`})))):null};var p=()=>{const{searchTerm:e}=Object(a.useContext)(y),n=Object(c.b)(e);return n.length?o.a.createElement("div",{className:"write-data--section","data-testid":"write-data--section client-libraries"},o.a.createElement(i.Heading,{element:i.HeadingElement.H2,weight:i.FontWeight.Regular,style:{marginTop:"24px",marginBottom:"4px"}},"Client Libraries"),o.a.createElement(i.Heading,{element:i.HeadingElement.H5,weight:i.FontWeight.Regular,style:{marginBottom:"12px"}},"Back-end, front-end, and mobile applications"),o.a.createElement(i.SquareGrid,{cardSize:"170px",gutter:i.ComponentSize.Small},n.map(e=>o.a.createElement(m.a,{key:e.id,id:e.id,name:e.name,image:e.logo,url:`${d.c}/${e.id}`})))):null};var h=()=>{const{searchTerm:e}=Object(a.useContext)(y),n=Object(s.b)(e);return n.length?o.a.createElement("div",{className:"write-data--section","data-testid":"write-data--section telegraf-plugins"},o.a.createElement(i.Heading,{element:i.HeadingElement.H2,weight:i.FontWeight.Regular,style:{marginTop:"24px",marginBottom:"4px"},testID:"sources-telegraf-plugins"},"Telegraf Plugins"),o.a.createElement(i.Heading,{element:i.HeadingElement.H5,weight:i.FontWeight.Regular,style:{marginBottom:"12px"}},"An open-source agent for collecting data and reporting metrics via a vast library of plugins"),o.a.createElement(i.SquareGrid,{cardSize:"170px",gutter:i.ComponentSize.Small},n.map(e=>o.a.createElement(m.a,{key:e.id,id:e.id,name:e.name,image:e.image,url:`${d.t}/${e.id}`})))):null};var f=()=>{const{searchTerm:e}=Object(a.useContext)(y);return!!Object(r.b)(e).length||!!Object(c.b)(e).length||!!Object(s.b)(e).length?o.a.createElement(o.a.Fragment,null,o.a.createElement(u,null),o.a.createElement(p,null),o.a.createElement(h,null)):o.a.createElement(i.EmptyState,{size:i.ComponentSize.Large},o.a.createElement("h4",null,"Nothing matched ",o.a.createElement("strong",null,`"${e}"`)))},x=t(328),g=t(331),b=t(64);const y=Object(a.createContext)({searchTerm:"",setSearchTerm:()=>{}});n.default=()=>{const[e,n]=Object(a.useState)("");return o.a.createElement(y.Provider,{value:{searchTerm:e,setSearchTerm:n}},o.a.createElement(i.Page,{titleTag:Object(b.a)(["Sources","Load Data"])},o.a.createElement(x.a,null),o.a.createElement(g.a,{activeTab:"sources"},o.a.createElement(l,null),o.a.createElement(f,null))))}},30:function(e,n,t){"use strict";t.d(n,"a",(function(){return a})),t.d(n,"b",(function(){return o})),t.d(n,"c",(function(){return i}));const a=e=>e.me,o=e=>e.me.quartzMe,i=e=>{var n,t;const{quartzMe:a}=e.me,o=null!==(n=null==a?void 0:a.isRegionBeta)&&void 0!==n&&n;return"free"===(null!==(t=null==a?void 0:a.accountType)&&void 0!==t?t:"free")&&!1===o}},328:function(e,n,t){"use strict";var a=t(2),o=t.n(a),i=t(3),l=t(87);n.a=()=>o.a.createElement(i.Page.Header,{fullWidth:!1,testID:"load-data--header"},o.a.createElement(i.Page.Title,{title:"Load Data"}),o.a.createElement(l.a,null))},331:function(e,n,t){"use strict";var a=t(2),o=t.n(a),i=t(4),l=t(54),r=t(10),s=t(155),c=t(3),d=t(23),m=t(14),u=t(152);let p=class extends a.PureComponent{render(){const{activeTab:e,orgID:n,history:t}=this.props,a=e=>{t.push(`/orgs/${n}/load-data/${e}`)},i=[{text:"Sources",id:"sources",cloudExclude:!1,featureFlag:null},{text:"Buckets",id:"buckets",cloudExclude:!1,featureFlag:null},{text:"Telegraf",id:"telegrafs",cloudExclude:!1,featureFlag:null},{text:"Scrapers",id:"scrapers",cloudExclude:!0,featureFlag:null},{text:"API Tokens",id:"tokens",cloudExclude:!1,featureFlag:null}],l=i.find(n=>n.id===e).text;return o.a.createElement(c.Tabs,{orientation:c.Orientation.Horizontal,size:c.ComponentSize.Large,dropdownBreakpoint:872,dropdownLabel:l},i.map(n=>{let t=o.a.createElement(c.Tabs.Tab,{testID:`${n.id}--tab`,key:n.id,text:n.text,id:n.id,onClick:a,active:n.id===e});return n.cloudExclude&&(t=o.a.createElement(u.a,{key:n.id},t)),n.featureFlag&&(t=o.a.createElement(d.a,{key:n.id,name:n.featureFlag},t)),t}))}};p=Object(r.a)([m.a],p);var h=Object(s.j)(p),f=t(9);const x=e=>("buckets"!==e||!Object(d.c)("fetchAllBuckets"))&&("tokens"!==e||!Object(d.c)("paginatedTokens")),g=Object(i.c)(e=>({orgID:Object(f.a)(e).id}));n.a=g(({activeTab:e,orgID:n,children:t})=>o.a.createElement(c.Page.Contents,{fullWidth:!1,scrollable:x(e)},o.a.createElement(c.Tabs.Container,{orientation:c.Orientation.Horizontal,stretchToFitHeight:!0},o.a.createElement(h,{activeTab:e,orgID:n}),o.a.createElement(l.a,null,o.a.createElement(c.Tabs.TabContents,null,t)))))},51:function(e,n,t){"use strict";var a=t(2),o=t.n(a),i=t(4),l=t(15),r=t.n(l),s=t(155),c=t(3),d=t(75),m=t(30);n.a=({size:e=c.ComponentSize.Small,className:n,buttonText:t="Upgrade Now",metric:a})=>{const l=Object(i.e)(m.c),u=r()("upgrade-payg--button",{[`${n}`]:n}),p=Object(s.f)();return o.a.createElement(d.a,null,l&&o.a.createElement(c.Button,{icon:c.IconFont.CrownSolid,className:u,color:c.ComponentColor.Success,size:e,shape:c.ButtonShape.Default,onClick:()=>{a&&a(),p.push("/checkout")},text:t,testID:"cloud-upgrade--button"}))}},59:function(e,n,t){"use strict";t.d(n,"a",(function(){return p}));var a=t(2),o=t.n(a),i=t(4),l=t(15),r=t.n(l),s=t(3),c=t(51),d=t(35),m=t(30),u=t(8);const p=({type:e,link:n,className:t,limitText:a})=>o.a.createElement("div",{className:`${t} rate-alert--content__free`},o.a.createElement("span",null,"Oh no! You hit the"," ",o.a.createElement("a",{href:n,className:"rate-alert--docs-link",target:"_blank",rel:"noreferrer"},"series cardinality"===e?"series cardinality":"query write")," ","limit ",null!=a?a:""," and your data stopped writing. Donâ€™t lose important metrics."),o.a.createElement(s.FlexBox,{justifyContent:s.JustifyContent.Center,className:"rate-alert--button"},o.a.createElement(c.a,{className:"upgrade-payg--button__rate-alert",metric:()=>Object(u.a)(`user.limits.${e}.upgrade`)})));n.b=({className:e})=>{const n=Object(i.d)(),t=Object(i.e)(m.c),a=r()("rate-alert--content",{[`${e}`]:e});return t?o.a.createElement(p,{type:"series cardinality",link:"https://docs.influxdata.com/influxdb/v2.0/write-data/best-practices/resolve-high-cardinality/",className:a}):o.a.createElement("div",{className:`${a} rate-alert--content__payg`},o.a.createElement("span",null,"Data in has stopped because you've hit the"," ",o.a.createElement("a",{href:"https://docs.influxdata.com/influxdb/v2.0/write-data/best-practices/resolve-high-cardinality/",className:"rate-alert--docs-link",target:"_blank",rel:"noreferrer"},"series cardinality")," ","limit. Let's get it flowing again."),o.a.createElement(s.FlexBox,{justifyContent:s.JustifyContent.Center,className:"rate-alert--button"},o.a.createElement(s.Button,{className:"rate-alert-overlay-button",color:s.ComponentColor.Primary,size:s.ComponentSize.Small,onClick:()=>{n(Object(d.d)("rate-limit",null,()=>n(d.b)))},text:"Inspect Series Cardinality"})))}},742:function(e,n,t){"use strict";var a=t(2),o=t.n(a),i=t(4),l=t(155),r=t(3),s=t(9),c=t(310),d=t.n(c),m=t(203);t(968);const u=o.a.lazy(()=>t.e(355).then(t.bind(null,1253)));n.a=({id:e,name:n,url:t,image:c,selected:p,onClick:h,testID:f})=>{const x=Object(l.f)(),g=Object(i.e)(s.a),b=()=>{x.push(`/${m.m}/${g.id}/load-data/${t}`)};let y=o.a.createElement("img",{src:d.a});return c&&(y=o.a.createElement(a.Suspense,{fallback:"Loading..."},o.a.createElement(u,{image:c}))),h?o.a.createElement(r.SquareGrid.Card,{key:e},o.a.createElement(r.SelectableCard,{id:e,formName:"load-data-cards",label:n,selected:p,onClick:h,testID:f,fontSize:r.ComponentSize.ExtraSmall,className:"write-data--item"},o.a.createElement("div",{className:"write-data--item-thumb"},y))):o.a.createElement(r.SquareGrid.Card,{key:e},o.a.createElement(r.SelectableCard,{id:e,formName:"load-data-cards",label:n,testID:`load-data-item ${e}`,selected:!1,onClick:b,fontSize:r.ComponentSize.ExtraSmall,className:"write-data--item"},o.a.createElement("div",{className:"write-data--item-thumb"},y)))}},75:function(e,n,t){"use strict";var a=t(2),o=t(6);n.a=class extends a.PureComponent{render(){const{children:e}=this.props;return o.f?e:null}}},855:function(e,n,t){"use strict";t.d(n,"a",(function(){return r})),t.d(n,"b",(function(){return s}));var a=t(966),o=t.n(a),i=t(967),l=t.n(i);const r=[{id:"annotated_csv",name:"Flux Annotated CSV",image:o.a,markdown:'For more detailed and up to date information check out the <a href="https://docs.influxdata.com/influxdb/v2.0/write-data/developer-tools/csv/#csv-annotations" target="_blank" rel="noreferrer">Annotated CSV Documentation</a>\n\n##### Getting Started\n\nThe Flux Annotated CSV uploader is a simple tool that can be used to upload Flux files downloaded from the UI or exported from the command line tools directly into a bucket.\n\nIf you\'re looking to upload Annotated CSV files into a specific bucket, simply select the bucket you want your data uploaded to and drag & drop your data into the dropzone below.\n'},{id:"csv",name:"CSV Data",image:o.a,markdown:'For more detailed and up to date information check out the [Annotated CSV Documentation](https://docs.influxdata.com/influxdb/v2.0/reference/syntax/annotated-csv/).\n\nFor ingesting custom CSV files into InfluxDB, we recommend you use the [`influx write` command](https://docs.influxdata.com/influxdb/cloud/reference/cli/influx/write/) in the InfluxDB Command Line Interface (CLI).\n\nYou can include [Extended annotated CSV](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/)\nannotations to specify how the data translates into [line protocol](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/).\n\nInclude annotations in the CSV file or inject them using the `--header` flag of\nthe `influx write` command. See the examples below for more details.\n\n##### Example write command\n\n```sh\ninflux write -b <%= bucket %> -f path/to/example.csv\n```\n\n##### example.csv\n\n```csv\n#datatype measurement,tag,double,dateTime:RFC3339\nm,host,used_percent,time\nmem,host1,64.23,2020-01-01T00:00:00Z\nmem,host2,72.01,2020-01-01T00:00:00Z\nmem,host1,62.61,2020-01-01T00:00:10Z\nmem,host2,72.98,2020-01-01T00:00:10Z\nmem,host1,63.40,2020-01-01T00:00:20Z\nmem,host2,73.77,2020-01-01T00:00:20Z\n```\n\n##### Resulting line protocol\n\n```lp\nmem,host=host1 used_percent=64.23 1577836800000000000\nmem,host=host2 used_percent=72.01 1577836800000000000\nmem,host=host1 used_percent=62.61 1577836810000000000\nmem,host=host2 used_percent=72.98 1577836810000000000\nmem,host=host1 used_percent=63.40 1577836820000000000\nmem,host=host2 used_percent=73.77 1577836820000000000\n```\n\n**_Note:_** To test the CSV to line protocol conversion process, use the `influx write dryrun`\ncommand to print the resulting line protocol to stdout rather than write to InfluxDB.\n\n## CSV Annotations\n\nUse **CSV annotations** to specify which element of line protocol each CSV column\nrepresents and how to format the data. CSV annotations are rows at the beginning\nof a CSV file that describe column properties.\n\nThe `influx write` command supports [Extended annotated CSV](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended)\nwhich provides options for specifying how CSV data should be converted into line\nprotocol and how data is formatted.\n\nTo write data to InfluxDB, data must include the following:\n\n- [measurement](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/#measurement)\n- [field set](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/#field-set)\n- [timestamp](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/#timestamp) _(Optional but recommended)_\n- [tag set](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/#tag-set) _(Optional)_\n\nUse CSV annotations to specify which of these elements each column represents.\n\n## Inject annotation headers\n\nIf the CSV data you want to write to InfluxDB does not contain the annotations\nrequired to properly convert the data to line protocol, use the `--header` flag\nto inject annotation rows into the CSV data.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f path/to/example.csv \\\n  --header "#constant measurement,birds" \\\n  --header "#datatype dataTime:2006-01-02,long,tag"\n```\n\n##### example.csv\n\n```\ndate,sighted,loc\n2020-01-01,12,Boise\n2020-06-01,78,Boise\n2020-01-01,54,Seattle\n2020-06-01,112,Seattle\n2020-01-01,9,Detroit\n2020-06-01,135,Detroit\n```\n\n##### Resulting line protocol\n\n```\nbirds,loc=Boise sighted=12i 1577836800000000000\nbirds,loc=Boise sighted=78i 1590969600000000000\nbirds,loc=Seattle sighted=54i 1577836800000000000\nbirds,loc=Seattle sighted=112i 1590969600000000000\nbirds,loc=Detroit sighted=9i 1577836800000000000\nbirds,loc=Detroit sighted=135i 1590969600000000000\n```\n\n#### Use files to inject headers\n\nThe `influx write` command supports importing multiple files in a single command.\nInclude annotations and header rows in their own file and import them with the write command.\nFiles are read in the order in which they\'re provided.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f path/to/headers.csv \\\n  -f path/to/example.csv\n```\n\n##### headers.csv\n\n```\n#constant measurement,birds\n#datatype dataTime:2006-01-02,long,tag\n```\n\n##### example.csv\n\n```\ndate,sighted,loc\n2020-01-01,12,Boise\n2020-06-01,78,Boise\n2020-01-01,54,Seattle\n2020-06-01,112,Seattle\n2020-01-01,9,Detroit\n2020-06-01,135,Detroit\n```\n\n##### Resulting line protocol\n\n```\nbirds,loc=Boise sighted=12i 1577836800000000000\nbirds,loc=Boise sighted=78i 1590969600000000000\nbirds,loc=Seattle sighted=54i 1577836800000000000\nbirds,loc=Seattle sighted=112i 1590969600000000000\nbirds,loc=Detroit sighted=9i 1577836800000000000\nbirds,loc=Detroit sighted=135i 1590969600000000000\n```\n\n## Skip annotation headers\n\nSome CSV data may include header rows that conflict with or lack the annotations\nnecessary to write CSV data to InfluxDB.\nUse the `--skipHeader` flag to specify the **number of rows to skip** at the\nbeginning of the CSV data.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f path/to/example.csv \\\n  --skipHeader=2\n```\n\nYou can then inject new header rows to rename columns and provide the necessary annotations.\n\n## Process input as CSV\n\nThe `influx write` command automatically processes files with the `.csv` extension as CSV files.\nIf your CSV file uses a different extension, use the `--format` flat to explicitly\ndeclare the format of the input file.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f path/to/example.txt \\\n  --format csv\n```\n\n**_Note:_** The `influx write` command assumes all input files are line protocol unless they\ninclude the `.csv` extension or you declare the `csv`.\n\n## Specify CSV character encoding\n\nThe `influx write` command assumes CSV files contain UTF-8 encoded characters.\nIf your CSV data uses different character encoding, specify the encoding\nwith the `--encoding`.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f path/to/example.csv \\\n  --encoding "UTF-16"\n```\n\n## Skip rows with errors\n\nIf a row in your CSV data is missing an\n[element required to write to InfluxDB](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/#elements-of-line-protocol)\nor data is incorrectly formatted, when processing the row, the `influx write` command\nreturns an error and cancels the write request.\nTo skip rows with errors, use the `--skipRowOnError` flag.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f path/to/example.csv \\\n  --skipRowOnError\n```\n\n**_Warning:_** Skipped rows are ignored and are not written to InfluxDB.\n\n## Advanced examples\n\n### Define constants\n\nUse the Extended annotated CSV [`#constant` annotation](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/#constant)\nto add a column and value to each row in the CSV data.\n\n##### CSV with constants\n\n```\n#constant measurement,example\n#constant tag,source,csv\n#datatype long,dateTime:RFC3339\ncount,time\n1,2020-01-01T00:00:00Z\n4,2020-01-02T00:00:00Z\n9,2020-01-03T00:00:00Z\n18,2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample,source=csv count=1 1577836800000000000\nexample,source=csv count=4 1577923200000000000\nexample,source=csv count=9 1578009600000000000\nexample,source=csv count=18 1578096000000000000\n```\n\n---\n\n### Annotation shorthand\n\nExtended annotated CSV supports [annotation shorthand](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/#annotation-shorthand),\nwhich lets you define the **column label**, **datatype**, and **default value** in the column header.\n\n##### CSV with annotation shorthand\n\n```\nm|measurement,count|long|0,time|dateTime:RFC3339\nexample,1,2020-01-01T00:00:00Z\nexample,4,2020-01-02T00:00:00Z\nexample,,2020-01-03T00:00:00Z\nexample,18,2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample count=1 1577836800000000000\nexample count=4 1577923200000000000\nexample count=0 1578009600000000000\nexample count=18 1578096000000000000\n```\n\n#### Replace column header with annotation shorthand\n\nIt\'s possible to replace the column header row in a CSV file with annotation\nshorthand without modifying the CSV file.\nThis lets you define column data types and default values while writing to InfluxDB.\n\nTo replace an existing column header row with annotation shorthand:\n\n1. Use the `--skipHeader` flag to ignore the existing column header row.\n2. Use the `--header` flag to inject a new column header row that uses annotation shorthand.\n\n**_Note:_** `--skipHeader` is the same as `--skipHeader=1`.\n\n```sh\ninflux write -b <%= bucket %> \\\n  -f example.csv \\\n  --skipHeader\n  --header="m|measurement,count|long|0,time|dateTime:RFC3339"\n```\n\n##### Unmodified example.csv\n\n```\nm,count,time\nexample,1,2020-01-01T00:00:00Z\nexample,4,2020-01-02T00:00:00Z\nexample,,2020-01-03T00:00:00Z\nexample,18,2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample count=1i 1577836800000000000\nexample count=4i 1577923200000000000\nexample count=0i 1578009600000000000\nexample count=18i 1578096000000000000\n```\n\n---\n\n### Ignore columns\n\nUse the Extended annotated CSV [`#datatype ignored` annotation](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/#ignored)\nto ignore columns when writing CSV data to InfluxDB.\n\n##### CSV data with ignored column\n\n```\n#datatype measurement,long,time,ignored\nm,count,time,foo\nexample,1,2020-01-01T00:00:00Z,bar\nexample,4,2020-01-02T00:00:00Z,bar\nexample,9,2020-01-03T00:00:00Z,baz\nexample,18,2020-01-04T00:00:00Z,baz\n```\n\n##### Resulting line protocol\n\n```\nm count=1i 1577836800000000000\nm count=4i 1577923200000000000\nm count=9i 1578009600000000000\nm count=18i 1578096000000000000\n```\n\n---\n\n### Use alternate numeric formats\n\nIf your CSV data contains numeric values that use a non-default fraction separator (`.`)\nor contain group separators, [define your numeric format](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/#double)\nin the `double`, `long`, and `unsignedLong` datatype annotations.\n\n**_Note:_** If your **numeric format separators** include a comma (`,`), wrap the column annotation in double\nquotes (`""`) to prevent the comma from being parsed as a column separator or delimiter.\nYou can also define a custom column separator by injecting the `sep=` header.\n\n##### CSV with non-default float values\n\n```\n#datatype measurement,"double:.,",dateTime:RFC3339\nm,lbs,time\nexample,"1,280.7",2020-01-01T00:00:00Z\nexample,"1,352.5",2020-01-02T00:00:00Z\nexample,"1,862.8",2020-01-03T00:00:00Z\nexample,"2,014.9",2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample lbs=1280.7 1577836800000000000\nexample lbs=1352.5 1577923200000000000\nexample lbs=1862.8 1578009600000000000\nexample lbs=2014.9 1578096000000000000\n```\n\n##### CSV with non-default integer values\n\n```\n#datatype measurement,"long:.,",dateTime:RFC3339\nm,lbs,time\nexample,"1,280.0",2020-01-01T00:00:00Z\nexample,"1,352.0",2020-01-02T00:00:00Z\nexample,"1,862.0",2020-01-03T00:00:00Z\nexample,"2,014.9",2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample lbs=1280i 1577836800000000000\nexample lbs=1352i 1577923200000000000\nexample lbs=1862i 1578009600000000000\nexample lbs=2014i 1578096000000000000\n```\n\n##### CSV with non-default uinteger values\n\n```\n#datatype measurement,"unsignedLong:.,",dateTime:RFC3339\nm,lbs,time\nexample,"1,280.0",2020-01-01T00:00:00Z\nexample,"1,352.0",2020-01-02T00:00:00Z\nexample,"1,862.0",2020-01-03T00:00:00Z\nexample,"2,014.9",2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample lbs=1280u 1577836800000000000\nexample lbs=1352u 1577923200000000000\nexample lbs=1862u 1578009600000000000\nexample lbs=2014u 1578096000000000000\n```\n\n---\n\n### Use alternate boolean format\n\nLine protocol supports only [specific boolean values](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/#boolean).\nIf your CSV data contains boolean values that line protocol does not support,\n[define your boolean format](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/#boolean)\nin the `boolean` datatype annotation.\n\n##### CSV with non-default boolean values\n\n```\nsep=;\n#datatype measurement,"boolean:y,Y,1:n,N,0",dateTime:RFC3339\nm,verified,time\nexample,y,2020-01-01T00:00:00Z\nexample,n,2020-01-02T00:00:00Z\nexample,1,2020-01-03T00:00:00Z\nexample,N,2020-01-04T00:00:00Z\n```\n\n##### Resulting line protocol\n\n```\nexample verified=true 1577836800000000000\nexample verified=false 1577923200000000000\nexample verified=true 1578009600000000000\nexample verified=false 1578096000000000000\n```\n\n---\n\n### Use different timestamp formats\n\nThe `influx write` command automatically detects **RFC3339** and **number** formatted\ntimestamps when converting CSV to line protocol.\nIf using a different timestamp format, [define your timestamp format](https://docs.influxdata.com/influxdb/cloud/reference/syntax/annotated-csv/extended/#datetime)\nin the `dateTime` datatype annotation.\n\n##### CSV with non-default timestamps\n\n```\n#datatype measurement,dateTime:2006-01-02,field\nm,time,lbs\nexample,2020-01-01,1280.7\nexample,2020-01-02,1352.5\nexample,2020-01-03,1862.8\nexample,2020-01-04,2014.9\n```\n\n##### Resulting line protocol\n\n```\nexample lbs=1280.7 1577836800000000000\nexample lbs=1352.5 1577923200000000000\nexample lbs=1862.8 1578009600000000000\nexample lbs=2014.9 1578096000000000000\n```\n'},{id:"lp",name:"Line Protocol",image:l.a,markdown:'For more detailed and up to date information check out the [Line Protocol Documentation](https://docs.influxdata.com/influxdb/cloud/reference/syntax/line-protocol/).\n\n##### Getting Started\n\nThe Line Protocol uploader is a simple tool that can be used to upload files directly to a bucket by uploading a file or writing line protocol directly.\n\nIf you\'re looking to upload Line Protocol files into a specific bucket, simply select the bucket you want your data uploaded to, select the precision of the timestamp your data is set to, and drag & drop your data into the dropzone below. If you\'re interested in manually writing data into your bucket using line protocol, please continue to the section below.\n\n##### Writing Line Protocol\n\nInfluxDB uses line protocol to write data points. It is a text-based format that provides the measurement, tag set, field set, and timestamp of a data point.\n\nSyntax:\n\n```\nmeasurementName,tagKey=tagValue fieldKey="fieldValue" 1465839830100400200\n--------------- --------------- --------------------- -------------------\n       |               |                  |                    |\n  Measurement       Tag set           Field set            Timestamp\n```\n\nExample:\n\n```\nmyMeasurement,tag1=value1,tag2=value2 fieldKey="fieldValue" 1556813561098000000\n```\n\nLines separated by the newline character `\\n` represent a single point in InfluxDB. Line protocol is whitespace sensitive.\n'}],s=e=>r.filter(n=>n.name.toLowerCase().includes(e.toLowerCase())).sort((e,n)=>e.name.toLowerCase().localeCompare(n.name.toLowerCase()))},87:function(e,n,t){"use strict";var a=t(2),o=t.n(a),i=t(4),l=t(15),r=t.n(l),s=t(3),c=t(51),d=t(52),m=t(6),u=t(59),p=t(11),h=t(12),f=t(30),x=t(35);t(96);const g={sendNotify:p.c,handleShowOverlay:x.d,handleDismissOverlay:x.b};n.a=Object(i.c)(e=>{const n=Object(d.j)(e);return{status:Object(d.k)(e),resources:n,showUpgrade:Object(f.c)(e)}},g)(({status:e,alertOnly:n,className:t,resources:i,showUpgrade:l,sendNotify:d,handleShowOverlay:p,handleDismissOverlay:f})=>{const x=()=>{p("write-limit",null,f)};Object(a.useEffect)(()=>{m.f&&"exceeded"===e&&i.includes("write")&&d(l?Object(h.Ud)("",o.a.createElement(u.a,{type:"write",link:"https://docs.influxdata.com/influxdb/v2.0/write-data/best-practices/optimize-writes/",className:"flex-upgrade-content"})):Object(h.Ud)("Data in has stopped because you've hit the query write limit. Let's get it flowing again: ",o.a.createElement(s.Button,{className:"rate-alert-overlay-button",color:s.ComponentColor.Primary,size:s.ComponentSize.Small,onClick:x,text:"Request Write Limit Increase"})))},[l,e]);const g=r()("rate-alert",{[`${t}`]:t});return m.f&&"exceeded"===e&&i.includes("cardinality")?o.a.createElement(s.FlexBox,{direction:s.FlexDirection.Column,alignItems:s.AlignItems.Center,margin:s.ComponentSize.Large,className:g},o.a.createElement(s.BannerPanel,{size:s.ComponentSize.ExtraSmall,gradient:s.Gradients.PolarExpress,icon:s.IconFont.Cloud,hideMobileIcon:!0,textColor:s.InfluxColors.Yeti},o.a.createElement(u.b,null))):m.f&&!n?o.a.createElement(c.a,{className:"upgrade-payg--button__header"}):null})},96:function(e,n,t){var a=t(97);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(18)(a,o);a.locals&&(e.exports=a.locals)},966:function(e,n,t){e.exports=t.p+"c5e11df30f.svg"},967:function(e,n,t){e.exports=t.p+"7c232faa6b.svg"},968:function(e,n,t){var a=t(969);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(18)(a,o);a.locals&&(e.exports=a.locals)},969:function(e,n,t){(e.exports=t(17)(!1)).push([e.i,"/*\n   Influx Color Palette\n   -----------------------------------------------------------------------------\n*/\n/*\n   Z Variables\n   -----------------------------------------------------------------------------\n   Might not actually need any of these yet\n*/\n/*\n   Motifs\n   -----------------------------------------------------------------------------\n   Goal is to re-use these variables as much as possible to ensure powerful\n   control over the UI kit proportions\n*/\n/*\n   Typography Variables\n   -----------------------------------------------------------------------------\n*/\n/*\n   Page Layout Variables\n   -----------------------------------------------------------------------------\n   NavMenu + Page components\n*/\n/*\n   Responsive Breakpoints\n   -----------------------------------------------------------------------------\n*/\n/*\n   Form Element Sizing\n   -----------------------------------------------------------------------------\n   These ensure consistent sizing across elements such as Buttons, SelectGroup,\n   Dropdown, Input, etc.\n*/\n/*\n   Empty State\n   -----------------------------------------------------------------------------\n*/\n/*\n   Input Variables\n   -----------------------------------------------------------------------------\n   These ensure consistent appearance across different kinds of inputs\n*/\n/*\n   Card Variables\n   -----------------------------------------------------------------------------\n   These ensure consistent appearance across different kinds of cards\n*/\n/*\n   Label Variables\n   -----------------------------------------------------------------------------\n   Used in both Inputs and Forms\n*/\n/*\n   Overlay Variables\n   -----------------------------------------------------------------------------\n   Used in both Inputs and Forms\n*/\n/*\n   Tree Nav Variables\n   -----------------------------------------------------------------------------\n*/\n/*\n   Mixins\n   -----------------------------------------------------------------------------\n*/\n.write-data--item.cf-selectable-card.cf-selectable-card__xs .cf-selectable-card--label {\n  font-size: 14px;\n  line-height: 14px;\n  padding-bottom: 11px;\n}\n\n.write-data--item-thumb {\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  width: 90%;\n  height: 90%;\n}\n.write-data--item-thumb img {\n  max-width: 100%;\n  max-height: 80px;\n}\n\n.write-data--item.cf-selectable-card .cf-selectable-card--children {\n  position: relative;\n}",""])},97:function(e,n,t){(e.exports=t(17)(!1)).push([e.i,".flex-upgrade-content {\n  display: flex;\n  align-items: center;\n}",""])}}]);
//# sourceMappingURL=52.037f0c99ca.js.map